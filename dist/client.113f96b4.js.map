{"version":3,"sources":["../../../src/client/cjm/util.ts","../../../src/client/cjm/xml.ts","../../../src/client/cjm/html.ts","../../../src/client/cjm/classes.ts","../../../src/client/cjm/functions.ts","../../../src/client/cjm/molecule.ts","../../../src/client/cjm/reaction.ts","../../../src/client/cjm/canvas.ts","../../../src/client/cjm/conditions.ts","../../../src/client/cjm/modelParameters.ts","../../../src/client/cjm/control.ts","../../../src/client/cjm/client.ts"],"names":[],"mappings":"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","file":"client.113f96b4.js","sourceRoot":"../html","sourcesContent":["/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0) ) + newMin;\n}","/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param {Element} element The xml element to search in.\n * @returns {ChildNode} The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a ChildNode.\n * @param {ChildNode} node The node to get the nodeValue of.\n * @returns {string} The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: ChildNode): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param {Map<string, any>} attributes The attributes (optional).\n * @param {string} attributeName The name of the attribute (optional).\n * @param {any} attributeValue The value of the attribute (optional).\n * @param {string} padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>,\n    attributeName?: string, attributeValue?: any, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    if (attributeName && attributeValue) {\n        s += ' ' + attributeName + '=\"' + attributeValue.toString() + '\"';\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param delimeter Whether values are delimeted.\n * @param {Map<string, any>} attributes The attributes (optional).\n * @param {string} attributeName The name of the attribute (optional).\n * @param {any} attributeValue The value of the attribute (optional).\n * @param {string} padding The padding (optional).\n * @param {boolean} padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>,\n    attributeName?: string, attributeValue?: any, padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, attributeName, attributeValue, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param {Element} element The element to get the attributes of.\n * @returns {Map<string, string>} The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName, attributeValue);\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param {XMLDocument | Element} xml The XML document or element.\n * @param {string} tagName The tag name.\n * @returns {Element} The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {;\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}\n\n/**\n * Convert XML to HTML.\n * @param {string} text The XML text.\n */\nexport function toHTML(text: string): string {\n    return text.replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\n/g, \"<br>\")\n        .replace(/\\t/g, \"&nbsp;&nbsp;&nbsp;&nbsp;\")\n        .replace(/  /g, \"&nbsp;&nbsp;\");\n}","/**\n * Create a table header row.\n * @param {string[]} headings The headings.\n * @returns {string} Table row with headings.\n */\nexport function getTH(headings: string[]): string {\n    var th = \"\";\n    for (let i = 0; i < headings.length; i++) {\n        th += \"<th>\" + headings[i] + \"</th>\";\n    }\n    return getTR(th);\n}\n\n/**\n * Create a table cell.\n * @param {string} x A cell for a table row.\n * @param {boolean} contentEditable If true then the cell is set to be editable.  \n * @returns {string} x wrapped in td tags.\n */\nexport function getTD(x: string, contentEditable: boolean = false): string {\n    let r: string = \"<td\";\n    if (contentEditable) {\n        r += \" contenteditable=\\\"true\\\"\";\n    }\n    r += \">\" + x + \"</td>\";\n    return r;\n}\n\n/**\n * Create a table row.\n * @param {string} x A row for a table.\n * @returns {string} x wrapped in tr tags.\n */\nexport function getTR(x: string): string {\n    return \"<tr>\" + x + \"</tr>\\n\";\n}\n\n/**\n * Create a table.\n * @param {string} x Table rows for a table.\n * @returns {string} x wrapped in table tags.\n */\nexport function getTable(x: string): string {\n    return \"<table>\" + x + \"</table>\";\n}\n\n/**\n * Create a div.\n * @param {string} x The content of the div.\n * @param {string | null} id The id of the div.\n * @param {string | null} html_class The class of the div.\n * @returns {string} x wrapped in div tags.\n */\nexport function getDiv(x: string, id: string | null, html_class: string | null): string {\n    let r: string = \"<div\";\n    if (id !== null) {\n        r += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (html_class !== null) {\n        r += \" class=\\\"\" + html_class + \"\\\"\";\n    }\n    return r + \">\" + x + \"</div>\";\n}\n\n/**\n * Create a input.\n * @param {string} type The input type (e.g. text, number).\n * @param {string | null} id The id of the button.\n * @param {string | null} func The function called on a change.\n * @param {string | null} value The value of the input.\n * @returns {string} An input HTML element.\n */\nexport function getInput(type: string, id: string | null, func: string | null,\n    value : string | null): string {\n    let r: string = \"<input type=\\\"\" + type + \"\\\"\";\n    if (id !== null) {\n        r += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (func !== null) {\n        r += \" onchange=\\\"\" + func + \"\\\"\";\n    }\n    if (value !== null) {\n        r += \" value=\\\"\" + value + \"\\\"\";\n    }\n    return r + \">\";\n}\n\n/**\n * Create a self closing tag.\n * @param {Map<string, string> | null} attributes The attributes.\n * @param {string} tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | null, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}","import { \n    getSelfClosingTag \n} from \"./html\";\n\nimport {\n    getTag\n} from \"./xml\";\n\n/**\n * A class for representing things with attributes.\n * @param {Map<string, string>} attributes The attributes.\n */\nexport abstract class Attributes {\n\n    /**\n     * The attributes.\n     */\n    attributes: Map<string, string>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns The name in lower case.\n     */\n    /*\n    get name(): string {\n        return this.constructor.name.toLowerCase().trim();\n    }\n    */\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.constructor.name + `(`;\n        this.attributes.forEach((value, key) => {\n            r += `${key}(${value}), `;\n        });\n        return r;\n    }\n\n    /**\n     * Get the tag representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns A tag representation.\n     */\n    toTag(tagName: string, padding?: string): string {\n        let s = getSelfClosingTag(this.attributes, tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return \"\\n\" + s;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, padding?: string): string {\n        return getTag(\"\", tagName, this.attributes, undefined, undefined, padding, false);\n    }\n}\n\n/**\n * A class for representing a number with attributes.\n * e.g. A value with units and measurement/uncertainty information.\n */\nexport class NumberWithAttributes extends Attributes {\n    value: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(tagName: string, padding?: string): string {\n        return getTag(this.value.toString().trim(), tagName, this.attributes, undefined, undefined, padding, false);\n    }\n}\n\n/**\n * A class for representing numerical values with a shared attributes.\n * e.g. An array values sharing the same units and measurement details.\n */\nexport class NumberArrayWithAttributes extends Attributes {\n\n    /**\n     * The values.\n     */\n    values: number[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \",\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number[]} values The values.\n     * @param {string} delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: number[], delimiter?: string) {\n        super(attributes);\n        this.values = values;\n        if (delimiter) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param {string} delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, padding?: string): string {\n        return getTag(this.values.toString().replaceAll(\",\", this.delimiter), tagName, this.attributes, undefined, undefined, padding, false);\n    }\n}","/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>): string {\n    if (map == null) {\n        return \"\";\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(', ');\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter: string): string {\n    if (array == null) {\n        return \"\";\n    }\n    if (delimiter == null) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n */\nexport function toNumberArray(s: string[]): number[] {\n    let r: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        r.push(parseFloat(s[i]));\n    }\n    return r;\n}\n\n/**\n * Is the string numeric in that it can be parsed as a float that is not a NaN?\n * @param {string} s The string.\n * @returns True if the string can be parsed as a float that is not a NaN and false otherwise.\n */\nexport function isNumeric(s: string): boolean {\n    return !isNaN(parseFloat(s));\n}","import {\n    Attributes, NumberArrayWithAttributes, NumberWithAttributes \n} from './classes.js';\n\nimport {\n    mapToString\n} from './functions.js';\n\nimport {\n    getTag\n} from './xml.js';\n\n/**\n * A class for representing an atom.\n * @param {Map<string, string>} attributes The attributes.\n * If there is no \"id\" or \"elementType\" key an error will be thrown.\n */\nexport class Atom extends Attributes {\n\n    /**\n     * @param attributes The attributes. If there is no \"id\" or \"elementType\" key an error will be thrown.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        let elementType: string | undefined = attributes.get(\"elementType\");\n        if (elementType == undefined) {\n            throw new Error('elementType is undefined');\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let s = super.toString();\n        return s + `)`;\n    }\n\n    /**\n     * @returns The id of the atom.\n     */\n    get id(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * @returns The element type of the atom.\n     */\n    get elementType(): string {\n        return this.attributes.get(\"elementType\") as string;\n    }\n}\n\n/**\n * A class for representing an atomic bond - a bond beteen two atoms.\n * @param {Map<string, string>} attributes The attributes.\n * @param {Atom} atomA One atom.\n * @param {Atom} atomB Another atom.\n * @param {string} order The order of the bond.\n */\nexport class Bond extends Attributes {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let s = super.toString();\n        return s + `)`;\n    }\n}\n\n\n/**\n * A class for representing a property.\n */\nexport class Property extends Attributes {\n\n    /**\n     * The property value.\n     */\n    property: NumberWithAttributes | NumberArrayWithAttributes;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {NumberWithAttributes | NumberArrayWithAttributes} property The property.\n     */\n    constructor(attributes: Map<string, string>, property: NumberWithAttributes | NumberArrayWithAttributes) {\n        super(attributes);\n        this.property = property;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + ` property(${this.property.toString()}))`;\n    }\n\n    /**\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string | undefined = undefined;\n        if (pad != undefined) {\n            if (padding != undefined) {\n                padding1 = padding + pad;\n            }\n        }\n        if (this.property instanceof NumberWithAttributes) {\n            return getTag(this.property.toXML(\"scalar\", padding1), \"property\", this.attributes, undefined, undefined, padding, true);\n        } else {\n            return getTag(this.property.toXML(\"array\", padding1), \"property\", this.attributes, undefined, undefined, padding, true);\n        }\n    }\n}\n\n/**\n * Represents the deltaEDown class.\n */\nexport class DeltaEDown extends NumberWithAttributes {\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing an energy transfer model.\n */\nexport class EnergyTransferModel extends Attributes {\n\n    /**\n     * The DeltaEDown.\n     */\n    deltaEDown: DeltaEDown;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {DeltaEDown} deltaEDown The DeltaEDown.\n     */\n    constructor(attributes: Map<string, string>, deltaEDown: DeltaEDown) {\n        super(attributes);\n        this.deltaEDown = deltaEDown;\n    }\n\n    /**\n     * @param padding - Optional padding string for formatting the XML output.\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        if (pad == undefined) {\n            return getTag(this.deltaEDown.toXML(\"me.deltaEDown\", padding), \"me:energyTransferModel\",\n             this.attributes, undefined, undefined, padding, false);\n        } else {\n            return getTag(this.deltaEDown.toXML(\"me.deltaEDown\", padding), \"energyTransferModel\",\n             undefined, undefined, undefined, padding, true);\n        }\n    }\n}\n\n/**\n * A class for representing a method for calculating the density of states.\n */\nexport class DOSCMethod {\n    type: string;\n    constructor(type: string) {\n        this.type = type;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return `DOSCMethod(type(${this.type}))`;\n    }\n\n    /**\n     * @param padding The padding (Optional).\n     * @returns A tag representation.\n     */\n    toTag(padding?: string): string {\n        let s: string = `<me.DOSCMethod xsi:type=\"${this.type}\"/>`;\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return \"\\n\" + s;\n    }\n}\n\n/**\n * A class for representing a molecule.\n * @param {string} id The id of the molecule.\n * @param {string} description The description of the molecule.\n * @param {boolean} active Indicates if the molecule is active.\n * @param {Map<string, Atom>} atoms A Map of atoms with keys as string atom ids and values as Atoms.\n * @param {Map<string, Bond>} bonds A Map of bonds with keys as string atom ids and values as Bonds.\n * @param {Map<string, Property>} properties A map of properties.\n * @param {EnergyTransferModel | null} energyTransferModel The energy transfer model.\n * @param {DOSCMethod | null} dOSCMethod The method for calculating density of states.\n */\nexport class Molecule extends Attributes {\n    id: string;\n    // Atoms\n    atoms: Map<string, Atom>;\n    // Bonds\n    bonds: Map<string, Bond>;\n    // Properties\n    properties: Map<string, Property>;\n    // EnergyTransferModel\n    energyTransferModel?: EnergyTransferModel;\n    // DOSCMethod\n    dOSCMethod?: DOSCMethod;\n\n    /**\n     * Create a molecule.\n     * @param {Map<string, string>} attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes known about are \"description\" and \"active\", but these do not exist for all molecules\n     * in Mesmer XML input/output files.\n     * @param {Map<string, Atom>} atoms A Map of atoms with keys as ids.\n     * @param {Map<string, Bond>} bonds A Map of bonds with. The keys combine the ids of the two bonded atoms.\n     * @param {Map<string, Property>} properties A map of properties.\n     * @param {EnergyTransferModel | null} energyTransferModel The energy transfer model.\n     * @param {DOSCMethod | null} dOSCMethod The method for calculating density of states.\n     */\n    constructor(\n        attributes: Map<string, string>,\n        atoms: Map<string, Atom>,\n        bonds: Map<string, Bond>,\n        properties: Map<string, Property>,\n        energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod) {\n        super(attributes);\n        let id: string | undefined = this.attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        this.id = id;\n        this.atoms = atoms;\n        this.bonds = bonds;\n        this.properties = properties;\n        this.energyTransferModel = energyTransferModel;\n        this.dOSCMethod = dOSCMethod;\n    }\n\n    /** \n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = `Molecule(id(${this.getID()}), `;\n        let description: string | undefined = this.getDescription();\n        if (description != undefined) {\n            r += `description(${description}), `;\n        }\n        let active: boolean | undefined = this.getActive();\n        if (active != undefined) {\n            r += `active(${active}), `;\n        }\n        if (this.atoms.size > 0) {\n            r += `atoms(${mapToString(this.atoms)}), `;\n        }\n        if (this.bonds.size > 0) {\n            r += `bonds(${mapToString(this.bonds)}), `;\n        }\n        if (this.properties.size > 0) {\n            r += `properties(${mapToString(this.properties)}), `;\n        }\n        if (this.energyTransferModel) {\n            r += `energyTransferModel(${this.energyTransferModel.toString()}), `;\n        }\n        if (this.dOSCMethod) {\n            r += `dOSCMethod(${this.dOSCMethod.toString()}), `;\n        }\n        return r + `)`;\n    }\n\n    /**\n     * @return The id of the molecule.\n     */\n    getID(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * Gets the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */\n    getDescription(): string | undefined {\n        return this.attributes.get(\"description\");\n    }\n\n    /**\n     * Gets the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        let active = this.attributes.get(\"active\");\n        if (active != undefined) {\n            return true;\n        }\n        return active;\n    }\n\n    /**\n     * @returns {number} The energy of the molecule or zero if the energy is not set.\n     * @throws An error if \"me.ZPE\" is a property, but is not mapped to a PropertyScalar.\n     */\n    getEnergy(): number {\n        let zpe: Property | undefined = this.properties.get('me:ZPE');\n        if (zpe == undefined) {\n            return 0;\n        }\n        if (zpe.property instanceof NumberWithAttributes) {\n            return zpe.property.value;\n        } else {\n            throw new Error(\"Expected a PropertyScalar but got a PropertyArray and not sure how to handle that.\");\n        }\n    }\n\n    /**\n     * Set the Energy of the molecule.\n     * @param {number} energy The energy of the molecule in kcal/mol.\n     */\n    setEnergy(energy: number) {\n        let property: Property | undefined = this.properties.get('me:ZPE');\n        if (property == undefined) {\n            throw new Error(\"No me.ZPE property found\");\n        }\n        if (property.property instanceof NumberArrayWithAttributes) {\n            throw new Error(\"Expected a NumberWithAttributes but got a NumberArrayWithAttributes and not sure how to handle that.\");\n        } else {\n            property.property.value = energy;\n        }\n    }\n\n    /**\n     * Get the RotationConstants of the molecule.\n     * @returns The RotationConstants of the molecule.\n     */\n    getRotationConstants(): number[] | undefined {\n        let property: Property | undefined = this.properties.get('me:rotConsts');\n        if (property != undefined) {\n            if (property.property != null) {\n                if (property.property instanceof NumberWithAttributes) {\n                    return [property.property.value];\n                } else {\n                    return property.property.values;\n                }\n            } else {\n                return undefined;\n            }\n        }\n        return property;\n    }\n\n    /**\n     * Get the VibrationFrequencies of the molecule.\n     * @returns The VibrationFrequencies of the molecule.\n     */\n    getVibrationFrequencies(): number[] | undefined {\n        let property: Property | undefined = this.properties.get('me:vibFreqs');\n        if (property != undefined) {\n            if (property.property instanceof NumberWithAttributes) {\n                return [property.property.value];\n            } else if (property.property instanceof NumberArrayWithAttributes) {\n                return property.property.values;\n            } else {\n                return undefined;\n            }\n        }\n        return property;\n    }\n\n    /**\n     * @param {string} tagName The tag name.\n     * @param {string} pad The pad (Optional).\n     * @param {number} level The level of padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, pad?: string, level?: number): string {\n        // Padding\n        let padding0: string = \"\";\n        let padding1: string = \"\";\n        let padding2: string = \"\";\n        let padding3: string = \"\";\n        if (pad != undefined && level != undefined) {\n            padding0 = pad.repeat(level);\n            padding1 = padding0 + pad;\n            padding2 = padding1 + pad;\n            padding3 = padding2 + pad;\n        }\n        // Atoms\n        let atoms_xml: string = \"\";\n        for (let atom of this.atoms.values()) {\n            atoms_xml += atom.toTag(\"atom\", padding2);\n        }\n        if (this.atoms.size > 1) {\n            if (atoms_xml != \"\") {\n                atoms_xml = getTag(atoms_xml, \"atomArray\", undefined, undefined, undefined, padding1, true);\n            }\n        }\n        // Bonds\n        let bonds_xml: string = \"\";\n        for (let bond of this.bonds.values()) {\n            bonds_xml += bond.toTag(\"bond\", padding2);\n        }\n        if (bonds_xml != \"\") {\n            bonds_xml = getTag(bonds_xml, \"bondArray\", undefined, undefined, undefined, padding1, true);\n        }\n        // Properties\n        let properties_xml: string = \"\";\n        this.properties.forEach(property => {\n            let property_xml: string = \"\";\n            if (property.property instanceof NumberWithAttributes) {\n                property_xml += property.property.toXML(\"scalar\", padding3);\n            } else {\n                property_xml += property.property.toXML(\"array\", padding3);\n            }\n            properties_xml += getTag(property_xml, \"property\", property.attributes, undefined, undefined, padding2, true);\n        });\n        if (this.properties.size > 1) {\n            if (properties_xml != \"\") {\n                properties_xml = getTag(properties_xml, \"propertyList\", undefined, undefined, undefined, padding1, true);\n            }\n        }\n        // EnergyTransferModel\n        let energyTransferModel_xml: string = \"\";\n        if (this.energyTransferModel) {\n            energyTransferModel_xml = this.energyTransferModel.toXML(pad, padding1);\n        }\n        // DOSCMethod\n        let dOSCMethod_xml: string = \"\";\n        if (this.dOSCMethod) {\n            dOSCMethod_xml = this.dOSCMethod.toTag(padding1);\n        }\n        return getTag(atoms_xml + bonds_xml + properties_xml + energyTransferModel_xml + dOSCMethod_xml,\n            tagName, this.attributes, undefined, undefined, padding0, true);\n    }\n}","import {\n    mapToString\n} from './functions.js';\n\nimport {\n    Molecule\n} from './molecule.js';\n\nimport {\n    Attributes, NumberWithAttributes\n} from './classes.js';\n\nimport {\n    getTag\n} from './xml.js';\n\n/**\n * A class for representing a Reaction Molecule.\n */\nexport class ReactionMolecule extends Attributes {\n\n    /**\n     * A reference to the molecule.\n     */\n    molecule: Molecule;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Molecule} molecule The molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes);\n        this.molecule = molecule;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} pad The pad for an extra level of padding (Optional).\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, pad?: string | undefined, padding?: string | undefined): string {\n        let padding1: string = \"\";\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = this.toTag(\"molecule\", padding1);\n        return getTag(s, tagName, undefined, undefined, undefined, padding, true);\n    }\n}\n\n/**\n * A class for representing a reactant.\n * This is a molecule often with a role in a reaction.\n */\nexport class Reactant extends ReactionMolecule {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Molecule} molecule The molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, molecule);\n    }\n}\n\n/**\n * A class for representing a product.\n * This is a molecule produced in a reaction.\n */\nexport class Product extends ReactionMolecule {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Molecule} molecule The molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, molecule);\n    }\n\n}\n\n/**\n * A class for representing a transition state.\n */\nexport class TransitionState extends ReactionMolecule {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Molecule} molecule The molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, molecule);\n    }\n\n    /**\n     * A convenience method to get the ref (the molecule ID) of the transition state.\n     * @returns The ref of the transition state.\n     */\n    getRef(): string {\n        let s: string | undefined = this.attributes.get(\"ref\");\n        if (s == null) {\n            throw new Error('Attribute \"ref\" is undefined.');\n        }\n        return s;\n    }\n}\n\n\n/**\n * A class for representing the Arrhenius pre-exponential factor.\n */\nexport class PreExponential extends NumberWithAttributes {\n\n    /**\n     * A class for representing the Arrhenius pre-exponential factor.\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing the Arrhenius activation energy factor.\n */\nexport class ActivationEnergy extends NumberWithAttributes {\n\n    /**\n     * A class for representing the Arrhenius pre-exponential factor.\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing the reference temperature.\n */\nexport class TInfinity extends NumberWithAttributes {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing the modified Arrhenius parameter factor.\n */\nexport class NInfinity extends NumberWithAttributes {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing tunneling.\n */\nexport class Tunneling extends Attributes {\n    \n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n    }\n}\n\n/**\n * A class for representing the MCRCMethod specifications.\n * Extended classes indicate how microcanonical rate constant is to be treated.\n */\nexport class MCRCMethod extends Attributes {\n\n    /**\n     * The name of the method.\n     */\n    mCRCMethodName: string;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} name The name or xsi:type of the method.\n     */\n    constructor(attributes: Map<string, string>, name: string) {\n        super(attributes);\n        this.mCRCMethodName = name;\n    }\n    toString() {\n        return `MCRCMethod(name(${this.mCRCMethodName}))`;\n    }\n}\n\n/**\n * A class for representing the inverse Laplace transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends MCRCMethod {\n\n    /**\n     * The pre-exponential factor.\n     */\n    preExponential: PreExponential | undefined;\n    \n    /**\n     * The activation energy.\n     */\n    activationEnergy: ActivationEnergy | undefined;\n    \n    /**\n     * The TInfinity.\n     */\n    tInfinity: TInfinity | undefined;\n    \n    /**\n     * The nInfinity.\n     */\n    nInfinity: NInfinity | undefined;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PreExponential | undefined} preExponential The pre-exponential factor.\n     * @param {ActivationEnergy | undefined} activationEnergy The activation energy.\n     * @param {TInfinity | undefined} tInfinity The TInfinity.\n     * @param {NInfinity | undefined} nInfinity The nInfinity.\n     */\n    constructor(attributes: Map<string, string>, preExponential: PreExponential | undefined,\n        activationEnergy: ActivationEnergy | undefined, tInfinity: TInfinity | undefined,\n        nInfinity: NInfinity | undefined) {\n        super(attributes, \"MesmerILT\");\n        this.preExponential = preExponential;\n        this.activationEnergy = activationEnergy;\n        this.tInfinity = tInfinity;\n        this.nInfinity = nInfinity;\n    }\n\n    toString() {\n        return `MesmerILT(${super.toString()}, ` +\n            `preExponential(${this.preExponential}), ` +\n            `activationEnergy(${this.activationEnergy}), ` +\n            `TInfinity(${this.tInfinity}), ` +\n            `nInfinity(${this.nInfinity}))`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(tagName: string, padding?: string | undefined): string {\n        let padding1: string = \"\";\n        if (padding != undefined) {\n            padding1 = padding + \"  \";\n        }\n        let preExponential_xml: string = \"\";\n        if (this.preExponential != undefined) {\n            preExponential_xml = this.preExponential.toXML(\"me.preExponential\", padding1);\n        }\n        let activationEnergy_xml: string = \"\";\n        if (this.activationEnergy != undefined) {\n            activationEnergy_xml = this.activationEnergy.toXML(\"me.activationEnergy\", padding1);\n        }\n        let tInfinity_xml: string = \"\";\n        if (this.tInfinity != undefined) {\n            tInfinity_xml = this.tInfinity.toXML(\"me.nInfinity\", padding1);\n        }\n        let nInfinity_xml: string = \"\";\n        if (this.nInfinity != undefined) {\n            nInfinity_xml = this.nInfinity.toXML(\"me.nInfinity\", padding1);\n        }\n        return getTag(preExponential_xml + activationEnergy_xml + tInfinity_xml + nInfinity_xml,\n            tagName, this.attributes, undefined, undefined, padding, true);\n    }\n}\n\n/**\n * A class for representing the Zhu-Nakamura crossing MCRCMethod.\n */\nexport class ZhuNakamuraCrossing extends MCRCMethod {\n    harmonicReactantDiabat_FC: number;\n    harmonicReactantDiabat_XO: number;\n    harmonicProductDiabat_DE: number;\n    exponentialProductDiabat_A: number;\n    exponentialProductDiabat_B: number;\n    exponentialProductDiabat_DE: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number} harmonicReactantDiabat_FC The harmonic reactant diabatic FC.\n     * @param {number} harmonicReactantDiabat_XO The harmonic reactant diabatic XO.\n     * @param {number} harmonicProductDiabat_DE The harmonic product diabatic DE.\n     * @param {number} exponentialProductDiabat_A The exponential product diabatic A.\n     * @param {number} exponentialProductDiabat_B The exponential product diabatic B.\n     * @param {number} exponentialProductDiabat_DE The exponential product diabatic DE.\n     */\n    constructor(attributes: Map<string, string>,\n        harmonicReactantDiabat_FC: number,\n        harmonicReactantDiabat_XO: number,\n        harmonicProductDiabat_DE: number,\n        exponentialProductDiabat_A: number,\n        exponentialProductDiabat_B: number,\n        exponentialProductDiabat_DE: number) {\n        super(attributes, \"ZhuNakamuraCrossing\");\n        this.harmonicReactantDiabat_FC = harmonicReactantDiabat_FC;\n        this.harmonicReactantDiabat_XO = harmonicReactantDiabat_XO;\n        this.harmonicProductDiabat_DE = harmonicProductDiabat_DE;\n        this.exponentialProductDiabat_A = exponentialProductDiabat_A;\n        this.exponentialProductDiabat_B = exponentialProductDiabat_B;\n        this.exponentialProductDiabat_DE = exponentialProductDiabat_DE;\n    }\n    toString() {\n        return `ZhuNakamuraCrossing(${super.toString()}, ` +\n            `harmonicReactantDiabat_FC(${this.harmonicReactantDiabat_FC.toString()}), ` +\n            `harmonicReactantDiabat_XO(${this.harmonicReactantDiabat_XO.toString()}), ` +\n            `harmonicProductDiabat_DE(${this.harmonicProductDiabat_DE.toString()}), ` +\n            `exponentialProductDiabat_A(${this.exponentialProductDiabat_A.toString()}), ` +\n            `exponentialProductDiabat_B(${this.exponentialProductDiabat_B.toString()}), ` +\n            `exponentialProductDiabat_DE(${this.exponentialProductDiabat_DE.toString()}))`;\n    }\n}\n\n/**\n * A class for representing the sum of states.\n * @param {string} units The units of energy.\n * @param {boolean} angularMomentum The angular momentum attribute.\n * @param {boolean} noLogSpline The no log spline attribute.\n * @param {SumOfStatesPoint[]} sumOfStatesPoints The sum of states points.\n */\n/*\nexport class SumOfStates extends NumberWithAttributes {\n    units: string;\n    angularMomentum: boolean;\n    noLogSpline: boolean;\n    sumOfStatesPoints: SumOfStatesPoint[];\n    constructor(units: string, angularMomentum: boolean, noLogSpline: boolean, sumOfStatesPoints: SumOfStatesPoint[]) {\n        this.units = units;\n        this.angularMomentum = angularMomentum;\n        this.noLogSpline = noLogSpline;\n        this.sumOfStatesPoints = sumOfStatesPoints;\n    }\n    toString() {\n        return `SumOfStates(` +\n            `units(${this.units}), ` +\n            `angularMomentum(${this.angularMomentum.toString()}), ` +\n            `noLogSpline(${this.noLogSpline.toString()}), ` +\n            `sumOfStatesPoints(${arrayToString(this.sumOfStatesPoints, \" \")}))`;\n    }\n}\n*/\n\n/**\n * A class for representing a sum of states point.\n * @param {number} value The value of the point.\n * @param {number} energy The energy of the point.\n * @param {number} angMomMag The angular momentum magnitude of the point.\n */\n/*\nexport class SumOfStatesPoint {\n    value: number;\n    energy: number;\n    angMomMag: number;\n    constructor(value: number, energy: number, angMomMag: number) {\n        this.value = value;\n        this.energy = energy;\n        this.angMomMag = angMomMag;\n    }\n    toString() {\n        return `SumOfStatesPoint(` +\n            `value(${this.value}), ` +\n            `energy(${this.energy.toString()}), ` +\n            `angMomMag(${this.angMomMag.toString()}))`;\n    }\n}\n*/\n\n/**\n * A class for representing the DefinedSumOfStates MCRCMethod.\n * @param {string} name The name or xsi:type of the method.\n * @param {SumOfStates} sumOfStates The sum of states.\n */\n/*\nexport class DefinedSumOfStates extends MCRCMethod {\n    sumOfStates: SumOfStates;\n\n    constructor(name: string, sumOfStates: SumOfStates) {\n        super(name);\n        this.sumOfStates = sumOfStates;\n    }\n    toString() {\n        return `DefinedSumOfStates(${super.toString()}, ` +\n            `sumOfStates(${this.sumOfStates.toString()}))`;\n    }\n}\n*/\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends Attributes {\n\n    /**\n     * The id of the reaction. This is also stored in the attributes, but is hee for convenience...\n     */\n    id: string;\n\n    /**\n     * The reactants in the reaction.\n     */\n    reactants: Map<string, Reactant>;\n\n    /**\n     * The products of the reaction.\n     */\n    products: Map<string, Product>;\n\n    /**\n     * The MCRCMethod.\n     */\n    mCRCMethod: MCRCMethod | undefined;\n\n    /**\n     * The transition state.\n     */\n    transitionState: TransitionState | undefined;\n\n    /**\n     * The tunneling.\n     */\n    tunneling: Tunneling | undefined;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} id The id of the reaction.\n     * @param {Map<string, Reactant>} reactants The reactants in the reaction.\n     * @param {Map<string, Product>} products The products of the reaction.\n     * @param {MCRCMethod | undefined} mCRCMethod The MCRCMethod (optional).\n     * @param {TransitionState | undefined} transitionState The transition state (optional).\n     * @param {Tunneling | undefined} tunneling The tunneling (optional).\n     */\n    constructor(attributes: Map<string, string>, id: string,\n        reactants: Map<string, Reactant>, products: Map<string, Product>,\n        mCRCMethod?: MCRCMethod | undefined,\n        transitionState?: TransitionState | undefined,\n        tunneling?: Tunneling | undefined) {\n        super(attributes);\n        this.id = id;\n        this.reactants = reactants;\n        this.products = products;\n        this.mCRCMethod = mCRCMethod;\n        this.transitionState = transitionState;\n        this.tunneling = tunneling;\n    }\n\n    /**\n     * Convert the product to a string.\n     * @returns String representation of the product.\n     */\n    toString(): string {\n        let s: string = super.toString();\n        return super.toString() + `id(${this.id}), ` +\n            `reactants(${mapToString(this.reactants)}), ` +\n            `products(${mapToString(this.products)}), ` +\n            `mCRCMethod(${this.mCRCMethod?.toString()}), ` +\n            `transitionState(${this.transitionState?.toString()}), ` +\n            `tunneling(${this.tunneling?.toString()}))`;\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string {\n        return Array.from(this.reactants.values()).map(reactant => reactant.molecule.id).join(' + ');\n    }\n\n    /**\n     * Get the combined energy of the reactants.\n     * @returns The combined energy of the reactants.\n     */\n    getReactantsEnergy(): number {\n        return Array.from(this.reactants.values()).map(reactant => reactant.molecule.getEnergy()).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string {\n        return Array.from(this.products.values()).map(product => product.molecule.id).join(' + ');\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(): number {\n        return Array.from(this.products.values()).map(product => product.molecule.getEnergy()).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.getReactantsLabel() + ' -> ' + this.getProductsLabel();\n        return label;\n    }\n\n    /**\n     * @param {string} tagName The tag name.\n     * @param {string} pad The pad (Optional).\n     * @param {number} level The level of padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, pad?: string, level?: number): string {\n        // Padding\n        let padding0: string = \"\";\n        let padding1: string = \"\";\n        let padding2: string = \"\";\n        let padding3: string = \"\";\n        if (pad != undefined && level != undefined) {\n            padding0 = pad.repeat(level);\n            padding1 = padding0 + pad;\n            padding2 = padding1 + pad;\n            padding3 = padding2 + pad;\n        }\n        // Reactants\n        let reactants_xml: string = \"\";\n        this.reactants.forEach(reactant => {\n            reactants_xml += reactant.toXML(\"reactant\", pad, padding1);\n        });\n        // Products\n        let products_xml: string = \"\";\n        this.products.forEach(product => {\n            products_xml += product.toXML(\"product\", pad, padding1);\n        });\n        // Tunneling\n        let tunneling_xml: string = \"\";\n        if (this.tunneling != undefined) {\n            tunneling_xml = this.tunneling.toTag(\"me.tunneling\", padding1);\n        }\n        // TransitionState\n        let transitionState_xml: string = \"\";\n        if (this.transitionState != undefined) {\n            transitionState_xml = this.transitionState.toXML(\"transitionState\", pad, padding1);\n        }\n        // MCRCMethod\n        let mCRCMethod_xml: string = \"\";\n        if (this.mCRCMethod != undefined) {\n            if (this.mCRCMethod instanceof MesmerILT) {\n                mCRCMethod_xml = this.mCRCMethod.toXML(\"mCRCMethod\", padding1);\n            } else {\n                mCRCMethod_xml = this.mCRCMethod.toTag(\"mCRCMethod\", padding1);\n            }\n        }\n        return getTag(reactants_xml + products_xml + tunneling_xml + transitionState_xml + mCRCMethod_xml,\n            tagName, this.attributes, undefined, undefined, padding0, true);\n    }\n}","/**\n * Draw a horizontal line and add labels.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {number} strokewidth The width of the line.\n * @param {number} x0 The start x-coordinate of the line.\n * @param {number} y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string, \n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {Integer} x1 The start x-coordinate of the line.\n * @param {Integer} y1 The start y-coordinate of the line.\n * @param {Integer} x2 The end x-coordinate of the line.\n * @param {Integer} y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to write.\n * @param {string} font The font to use.\n * @param {string} colour The colour of the text.\n * @param {number} x The horizontal position of the text.\n * @param {number} y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the height of.\n * @param {string} font The font to use.\n * @returns {number} The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the width of.\n * @param {string} font The font to use.\n * @returns {number} The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}","import {\n    Attributes, NumberWithAttributes\n} from \"./classes.js\";\n\nimport {\n    Molecule\n} from \"./molecule.js\";\n\nimport {\n    ReactionMolecule\n} from \"./reaction.js\";\nimport { getEndTag, getStartTag, getTag } from \"./xml.js\";\n\n\n/**\n * A class for representing a Pressure and Temperature pair.\n */\nexport class PTpair extends Attributes {\n\n    /**\n     * The pressure also stored as a string in the attributes.\n     */\n    P: number;\n\n    /**\n     * The temperature also stored as a string in the attributes.\n     */\n    T: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n        let p: string | undefined = attributes.get(\"P\");\n        if (p) {\n            this.P = parseFloat(p);\n        } else {\n            throw new Error(\"P is undefined\");\n        }\n        let t: string | undefined = attributes.get(\"T\");\n        if (t) {\n            this.T = parseFloat(t);\n        } else {\n            throw new Error(\"T is undefined\");\n        }\n    }\n}\n\n\n/**\n * A class for representing a bath gas reaction molecule.\n */\nexport class BathGas extends ReactionMolecule {\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, molecule);\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions {\n\n    /**\n     * The bath gas.\n     */\n    bathGas: BathGas;\n\n    /**\n     * The Pressure and Temperature pair.\n     */\n    pTs: PTpair[];\n\n    /**\n     * @param {BathGas} bathGas The bath gas.\n     * @param {PTpair} pTs The Pressure and Temperature pairs.\n     */\n    constructor(bathGas: BathGas, pTs: PTpair[]) {\n        this.bathGas = bathGas;\n        this.pTs = pTs;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString() : string {\n        return `Conditions(` +\n            `bathGas(${this.bathGas.toString()}), ` +\n            `pTs(${this.pTs.toString()}))`;\n    }\n\n    /**\n     * @param padding The padding (optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string = \"\";\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = this.bathGas.toXML(\"bathGas\", pad, padding1);\n        this.pTs.forEach((pt) => {\n            s += pt.toTag(\"PTpair\", padding1);\n        });\n        return getTag(s, \"conditions\", undefined, undefined, undefined, padding, true);\n    }\n}","import {\n    NumberWithAttributes\n} from \"./classes\";\nimport { getEndTag, getStartTag, getTag } from \"./xml\";\n\n/**\n * A class for measures of grain size.\n */\nexport class GrainSize extends NumberWithAttributes {\n\n    /**\n     * @param {string} units The units.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n    toString() {\n        return `GrainSize(${super.toString()})`;\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters {\n\n    /**\n     * The grain size.\n     */\n    grainSize: GrainSize;\n    \n    /**\n     * The energy above the top hill.\n     */\n    energyAboveTheTopHill: number;\n\n    /**\n     * @param {GrainSize} grainSize The grain size.\n     * @param {number} energyAboveTheTopHill The energy above the top hill.\n     */\n    constructor(grainSize: GrainSize, energyAboveTheTopHill: number) {\n        this.grainSize = grainSize;\n        this.energyAboveTheTopHill = energyAboveTheTopHill;\n    }\n\n    toString() {\n        return `ModelParameters(` +\n            `grainSize(${this.grainSize.toString()}), ` +\n            `energyAboveTheTopHill(${this.energyAboveTheTopHill.toString()}))`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} pad The pad (Optional).\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding2: string = \"\";\n        if (pad != undefined && padding != undefined) {\n            padding2 = padding + pad;\n        }\n        let s: string = this.grainSize.toXML(\"me:GrainSize\", padding2);\n        s += getTag(this.energyAboveTheTopHill.toString(), \"me:EnergyAboveTheTopHill\", undefined, undefined, undefined, padding2, false);\n        return getTag(s, \"me:modelParameters\", undefined, undefined, undefined, padding, true);\n    }\n}\n","import { \n    NumberWithAttributes\n } from \"./classes\";\nimport { getSelfClosingTag } from \"./html\";\nimport { getTag } from \"./xml\";\n\n/**\n * A class for the diagram energy offset.\n */\nexport class DiagramEnergyOffset extends NumberWithAttributes {\n    \n    /**\n     * @param {Map<string, string>} attributes The attributes (ref refers to a particular reaction). \n     * @param {number} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control {\n    testDOS: boolean | undefined;\n    printSpeciesProfile: boolean | undefined;\n    testMicroRates: boolean | undefined;\n    testRateConstant: boolean | undefined;\n    printGrainDOS: boolean | undefined;\n    printCellDOS: boolean | undefined;\n    printReactionOperatorColumnSums: boolean | undefined;\n    printTunnellingCoefficients: boolean | undefined;\n    printGrainkfE: boolean | undefined;\n    printGrainBoltzmann: boolean | undefined;\n    printGrainkbE: boolean | undefined;\n    eigenvalues: number | undefined;\n    hideInactive: boolean | undefined;\n    diagramEnergyOffset: DiagramEnergyOffset | undefined;\n    constructor(testDOS?: boolean, printSpeciesProfile?: boolean, testMicroRates?: boolean, testRateConstant?:\n        boolean, printGrainDOS?: boolean, printCellDOS?: boolean, printReactionOperatorColumnSums?:\n            boolean, printTunnellingCoefficients?: boolean, printGrainkfE?: boolean, printGrainBoltzmann?: boolean,\n        printGrainkbE?: boolean, eigenvalues?: number, hideInactive?: boolean, diagramEnergyOffset?: DiagramEnergyOffset) {\n        this.testDOS = testDOS;\n        this.printSpeciesProfile = printSpeciesProfile;\n        this.testMicroRates = testMicroRates;\n        this.testRateConstant = testRateConstant;\n        this.printGrainDOS = printGrainDOS;\n        this.printCellDOS = printCellDOS;\n        this.printReactionOperatorColumnSums = printReactionOperatorColumnSums;\n        this.printTunnellingCoefficients = printTunnellingCoefficients;\n        this.printGrainkfE = printGrainkfE;\n        this.printGrainBoltzmann = printGrainBoltzmann;\n        this.printGrainkbE = printGrainkbE;\n        this.eigenvalues = eigenvalues;\n        this.hideInactive = hideInactive;\n        this.diagramEnergyOffset = diagramEnergyOffset;\n    }\n    toString() {\n        return `Control(` +\n            `testDOS(${this.testDOS?.toString()}), ` +\n            `printSpeciesProfile(${this.printSpeciesProfile?.toString()}), ` +\n            `testMicroRates(${this.testMicroRates?.toString()}), ` +\n            `testRateConstant(${this.testRateConstant?.toString()}), ` +\n            `printGrainDOS(${this.printGrainDOS?.toString()}), ` +\n            `printCellDOS(${this.printCellDOS?.toString()}), ` +\n            `printReactionOperatorColumnSums(${this.printReactionOperatorColumnSums?.toString()}), ` +\n            `printTunnellingCoefficients(${this.printTunnellingCoefficients?.toString()}), ` +\n            `printGrainkfE(${this.printGrainkfE?.toString()}), ` +\n            `printGrainBoltzmann(${this.printGrainBoltzmann?.toString()}), ` +\n            `printGrainkbE(${this.printGrainkbE?.toString()}), ` +\n            `eigenvalues(${this.eigenvalues?.toString()}), ` +\n            `hideInactive(${this.hideInactive?.toString()}))`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} pad The pad (Optional).\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad: string, padding?: string): string {\n        let padding1: string = \"\";\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:testDOS\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printSpeciesProfile\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:testMicroRates\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:testRateConstant\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printGrainDOS\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printCellDOS\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printReactionOperatorColumnSums\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printTunnellingCoefficients\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printGrainkfE\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printGrainBoltzmann\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printGrainkbE\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:eigenvalues\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:hideInactive\");\n        s += this.diagramEnergyOffset?.toXML(\"me:diagramEnergyOffset\", padding1);\n        return getTag(s, \"control\", undefined, undefined, null, padding, true);\n    }\n}","import {\n    get, rescale\n} from './util.js';\n\nimport {\n    getAttribute, getFirstElement, getFirstChildNode, getNodeValue, getTag, getEndTag,\n    getAttributes, toHTML, getSingularElement\n} from './xml.js';\n\nimport {\n    Molecule, Atom, Bond, EnergyTransferModel, DeltaEDown, DOSCMethod, Property\n} from './molecule.js';\n\nimport {\n    Reaction, TransitionState, Reactant, Product, MCRCMethod, MesmerILT,\n    PreExponential, ActivationEnergy, NInfinity, ZhuNakamuraCrossing, Tunneling, TInfinity\n} from './reaction.js';\n\nimport {\n    arrayToString, toNumberArray, isNumeric\n} from './functions.js';\n\nimport {\n    getTD, getTH, getTR, getInput\n} from './html.js';\n\nimport {\n    drawLevel,\n    drawLine,\n    getTextHeight, getTextWidth\n} from './canvas.js';\n\nimport {\n    NumberArrayWithAttributes, NumberWithAttributes\n} from './classes.js';\n\nimport {\n    BathGas, Conditions, PTpair\n} from './conditions.js';\n\nimport {\n    GrainSize, ModelParameters\n} from './modelParameters.js';\n\nimport {\n    Control, DiagramEnergyOffset\n} from './control.js';\n\n// Code for service worker for Progressive Web App (PWA).\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n        navigator.serviceWorker.register('/sw.js').then(function (registration) {\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }, function (err) {\n            console.log('ServiceWorker registration failed: ', err);\n        });\n    });\n}\n\n//declare var global: any;\n//const globalScope = (typeof global !== 'undefined') ? global : window;\n\n//if (typeof global === 'undefined') {\n//    (window as any).global = window;\n//}\n\ndeclare global {\n    interface Window {\n        loadXML(): void;\n        saveXML(): void;\n    }\n}\n\n// Expected XML tags strings.\nlet me_title_s: string = 'me:title';\n\n/**\n * For storing me.title.\n */\nlet title: string;\n\n/**\n * For storing the XML root start tag.\n */\nlet mesmerStartTag: string;\n\n/**\n * For storing the XML root end tag.\n */\nlet mesmerEndTag: string;\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */\nlet molecules: Map<string, Molecule> = new Map([]);\n\n/**\n * For storing the maximum molecule energy in a reaction.\n */\nlet maxMoleculeEnergy: number = -Infinity;\n\n/**\n * For storing the minimum molecule energy in a reaction.\n */\nlet minMoleculeEnergy: number = Infinity;\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction> = new Map([]);\n\n/**\n * The header of the XML file.\n */\nconst header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n/**\n * The filename of the mesmer input file loaded.\n */\nlet input_xml_filename: string;\n\n/**\n * The load button.\n */\nlet loadButton: HTMLElement | null;\n\n/**\n * The save button.\n */\nlet saveButton: HTMLElement | null;\n\n/**\n * The XML text element.\n */\nlet me_title: HTMLCollectionOf<Element> | null;\nlet molecules_title: HTMLElement | null;\nlet molecules_table: HTMLElement | null;\nlet reactions_title: HTMLElement | null;\nlet reactions_table: HTMLElement | null;\nlet reactions_diagram_title: HTMLElement | null;\nlet conditions_title: HTMLElement | null;\nlet conditions_table: HTMLElement | null;\nlet modelParameters_title: HTMLElement | null;\nlet modelParameters_table: HTMLElement | null;\nlet xml_title: HTMLElement | null;\nlet xml_text: HTMLElement | null;\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xml: string) {\n    //console.log(\"xml=\" + xml);\n    if (xml_title != null) {\n        xml_title.innerHTML = input_xml_filename;\n    }\n    if (xml_text != null) {\n        xml_text.innerHTML = toHTML(xml);\n    }\n}\n\n/**\n * Parses xml to initilise molecules.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initMolecules(xml: XMLDocument): void {\n    let moleculeList_s: string = 'moleculeList';\n    console.log(moleculeList_s);\n    let xml_moleculeList: Element = getSingularElement(xml, moleculeList_s);\n    // Set molecules_title.\n    molecules_title = document.getElementById(\"molecules_title\");\n    if (molecules_title != null) {\n        molecules_title.innerHTML = \"Molecules\";\n    }\n    // xml_moleculeList should have one or more molecule elements and no other elements.\n    let moleculeListTagNames: Set<string> = new Set();\n    xml_moleculeList.childNodes.forEach(function (node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has(\"molecule\")) {\n        throw new Error(\"Expecting molecule tagName but it is not present!\");\n    }\n    let xml_molecules: HTMLCollectionOf<Element> = xml_moleculeList.getElementsByTagName('molecule');\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    // Process each molecule.\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf like this.\n    for (let i = 0; i < xml_molecules.length; i++) {\n        // Set attributes.\n        let attributes: Map<string, string> = getAttributes(xml_molecules[i]);\n\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_molecules[i].childNodes;\n        cns.forEach(function (node) {\n            moleculeTagNames.add(node.nodeName);\n        });\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n\n        // Set atoms.\n        const atoms: Map<string, Atom> = new Map();\n        // Sometimes there is an individual atom not in an atomArray.\n        //let xml_atomArray = xml_molecules[i].getElementsByTagName(\"atomArray\")[0];\n        //if (xml_atomArray != null) {\n        moleculeTagNames.delete(\"atom\");\n        moleculeTagNames.delete(\"atomArray\");\n\n        let xml_atoms: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(\"atom\");\n        for (let j = 0; j < xml_atoms.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_atoms[j]);\n            let id: string | undefined = attribs.get(\"id\");\n            if (id != undefined) {\n                let atom = new Atom(attribs);\n                //console.log(atom.toString());\n                atoms.set(id, atom);\n            }\n        }\n        //}\n        // Read bondArray.\n        moleculeTagNames.delete(\"bond\");\n        moleculeTagNames.delete(\"bondArray\");\n        const bonds: Map<string, Bond> = new Map();\n        let xml_bonds: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(\"bond\");\n        for (let j = 0; j < xml_bonds.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_bonds[j]);\n            let id: string | undefined = attribs.get(\"atomRefs2\");\n            if (id != undefined) {\n                let bond = new Bond(attribs);\n                //console.log(bond.toString());\n                bonds.set(id, bond);\n            }\n        }\n        // Read propertyList.\n        const properties: Map<string, Property> = new Map();\n        // Sometimes there is a single property not in propertyList!\n        //let xml_propertyList = xml_molecules[i].getElementsByTagName(\"propertyList\")[0];\n        //if (xml_propertyList != null) {\n        //    let xml_properties = xml_propertyList.getElementsByTagName(\"property\");\n\n        moleculeTagNames.delete(\"property\");\n        moleculeTagNames.delete(\"propertyList\");\n        let xml_properties: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(\"property\");\n        for (let j = 0; j < xml_properties.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_properties[j]);\n            let children: HTMLCollectionOf<Element> = xml_properties[j].children;\n            if (children.length != 1) {\n                throw new Error(\"Expecting 1 child but finding \" + children.length);\n            }\n            let nodeAttributes: Map<string, string> = getAttributes(children[0]);\n            let nodeName: string = children[0].nodeName; // Expecting scalar or array\n            let textContent: string | null = children[0].textContent;\n            if (textContent == null) {\n                console.error(\"nodeName\");\n                throw new Error('textContent is null');\n            }\n            textContent = textContent.trim();\n            let dictRef: string | undefined = attribs.get(\"dictRef\");\n            //console.log(\"dictRef=\" + dictRef);\n            if (dictRef == null) {\n                throw new Error('dictRef is null');\n            }\n            //console.log(\"fcnn=\" + fcnn);\n            if (nodeName == \"scalar\") {\n                moleculeTagNames.delete(\"scalar\");\n                let value: number = parseFloat(textContent);\n                properties.set(dictRef, new Property(attribs,\n                    new NumberWithAttributes(nodeAttributes, value)));\n                if (dictRef === \"me:ZPE\") {\n                    minMoleculeEnergy = Math.min(minMoleculeEnergy, value);\n                    maxMoleculeEnergy = Math.max(maxMoleculeEnergy, value);\n                }\n            } else if (nodeName == \"array\") {\n                moleculeTagNames.delete(\"array\");\n                properties.set(dictRef, new Property(attribs,\n                    new NumberArrayWithAttributes(nodeAttributes,\n                        toNumberArray(textContent.split(/\\s+/)), \" \")));\n            } else if (nodeName == \"matrix\") {\n            } else {\n                throw new Error(\"Unexpected nodeName: \" + nodeName);\n            }\n        }\n\n        let els: HTMLCollectionOf<Element> | null;\n\n        // Read energyTransferModel\n        moleculeTagNames.delete(\"me:energyTransferModel\");\n        let energyTransferModel: EnergyTransferModel | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(\"me:energyTransferModel\");\n        if (els != null) {\n            if (els.length > 0) {\n                if (els.length != 1) {\n                    throw new Error(\"energyTransferModel length=\" + els.length);\n                }\n                let xml_deltaEDown = els[0].getElementsByTagName(\"me:deltaEDown\");\n                if (xml_deltaEDown != null) {\n                    if (xml_deltaEDown.length != 1) {\n                        throw new Error(\"deltaEDown length=\" + xml_deltaEDown.length);\n                    }\n                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_deltaEDown[0])));\n                    let deltaEDown: DeltaEDown = new DeltaEDown(getAttributes(xml_deltaEDown[0]), value);\n                    energyTransferModel = new EnergyTransferModel(getAttributes(els[0]), deltaEDown);\n                }\n            }\n        }\n\n        // Read DOSCMethod\n        moleculeTagNames.delete(\"me:DOSCMethod\");\n        let dOSCMethod: DOSCMethod | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(\"me:DOSCMethod\");\n        if (els != null) {\n            let el: Element | null = els[0];\n            if (el != null) {\n                if (el != null) {\n                    let type = el.getAttribute(\"xsi:type\");\n                    if (type != null) {\n                        dOSCMethod = new DOSCMethod(type);\n                    }\n                }\n            }\n        }\n\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.error(\"Remaining moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.error(x));\n            throw new Error(\"Unexpected tags in molecule.\");\n        }\n\n        let molecule = new Molecule(attributes, atoms, bonds, properties, energyTransferModel, dOSCMethod);\n        //console.log(molecule.toString());\n        molecules.set(molecule.id, molecule);\n    }\n    // Add event listeners to molecules table.\n    molecules.forEach(function (molecule, id) {\n        let energyKey = id + \"_energy\";\n        let inputElement = document.getElementById(energyKey) as HTMLInputElement;\n        if (inputElement) {\n            inputElement.addEventListener('change', (event) => {\n                // The input is set up to call the function setEnergy(HTMLInputElement),\n                // so the following commented code is not used. As the input was setup \n                // as a number type. The any non numbers were It seems that there are two \n                // ways to get and store the value of the input element.\n                // Both ways have been kept for now as I don't know which way is better!\n                let eventTarget = event.target as HTMLInputElement;\n                let inputValue = eventTarget.value;\n                if (isNumeric(inputValue)) {\n                    molecule.setEnergy(parseFloat(inputValue));\n                    console.log(\"Set energy of \" + id + \" to \" + inputValue + \" kJ/mol\");\n                } else {\n                    alert(\"Energy input for \" + id + \" is not a number\");\n                    let inputElement = document.getElementById(energyKey) as HTMLInputElement;\n                    inputElement.value = molecule.getEnergy().toString();\n                    console.log(\"inputValue=\" + inputValue);\n                    console.log(\"Type of inputValue: \" + typeof inputValue);\n                }\n            });\n        }\n    });\n}\n\nlet inputElement: HTMLInputElement;\n\nfunction reload() {\n    inputElement = document.createElement('input');\n    inputElement.type = 'file';\n    inputElement.onchange = function () {\n        if (inputElement.files) {\n            for (let i = 0; i < inputElement.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            }\n            let file: File | null = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            input_xml_filename = file.name;\n            if (xml_text != null) {\n                let reader = new FileReader();\n                let chunkSize = 1024 * 1024; // 1MB\n                let start = 0;\n                let contents = '';\n                reader.onload = function (e) {\n                    if (!e.target) {\n                        throw new Error('Event target is null');\n                    }\n                    contents += (e.target as FileReader).result as string;\n                    if (file != null) {\n                        if (start < file.size) {\n                            // Read the next chunk\n                            let blob = file.slice(start, start + chunkSize);\n                            reader.readAsText(blob);\n                            start += chunkSize;\n                        } else {\n                            // All chunks have been read\n                            contents = contents.trim();\n                            displayXML(contents);\n                            let parser = new DOMParser();\n                            let xml = parser.parseFromString(contents, \"text/xml\");\n                            parse(xml);\n\n                            // Send XML to the server\n                            fetch('http://localhost:1234/', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'text/xml',\n                                },\n                                body: contents,\n                            })\n                                .then(response => {\n                                    if (!response.ok) {\n                                        throw new Error(`HTTP error! status: ${response.status}`);\n                                    }\n                                    return response.text();\n                                })\n                                .then(data => {\n                                    console.log('Server response:', data);\n                                })\n                                .catch(error => {\n                                    console.error('There was a problem with the fetch operation:', error);\n                                });\n                        }\n                    }\n                };\n                // Read the first chunk\n                let blob = file.slice(start, start + chunkSize);\n                reader.readAsText(blob);\n                start += chunkSize;\n            }\n        }\n    };\n    inputElement.click();\n    // Add event listener to load button.\n    loadButton = document.getElementById('load_button');\n    if (loadButton != null) {\n        loadButton.addEventListener('click', reload);\n    }\n\n    // Ensure save button is displayed.\n    saveButton = document.getElementById('saveButton');\n    if (saveButton != null) {\n        saveButton.style.display = 'inline';\n    }\n}\n\n/**\n * Once the DOM is loaded, set up the elements.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n\n    // Initialise elements\n    xml_title = document.getElementById(\"xml_title\");\n    xml_text = document.getElementById(\"xml_text\");\n\n\n    window.loadXML = function () {\n        reload();\n    }\n});\n\n/**\n * Set the title.\n * @param {XMLDocument} xml The XML document.\n */\nfunction setTitle(xml: XMLDocument) {\n    me_title = xml.getElementsByTagName(me_title_s);\n    if (me_title == null) {\n        throw new Error(me_title_s + ' not found');\n    } else {\n        if (me_title.length != 1) {\n            throw new Error('Multiple ' + me_title_s + ' elements found');\n        } else {\n            title = me_title[0].childNodes[0].nodeValue as string;\n            title = title.trim();\n            console.log(\"Title=\" + title);\n            let e: HTMLElement | null = document.getElementById(\"title\");\n            if (e != null) {\n                e.innerHTML = title;\n            }\n        }\n    }\n}\n\n/**\n * Parse the XML.\n * @param {XMLDocument} xml \n */\nfunction parse(xml: XMLDocument) {\n\n    /**\n     * Set mesmer_xml start tag.\n     */\n    mesmerStartTag = \"\\n\";\n    let documentElement: HTMLElement = xml.documentElement;\n    if (documentElement == null) {\n        throw new Error(\"Document element not found\");\n    } else {\n        let tagName: string = documentElement.tagName;\n        mesmerStartTag += \"<\" + tagName;\n        console.log(tagName);\n        mesmerEndTag = getEndTag(tagName, \"\", true);\n        let first: boolean = true;\n        let pad = \" \".repeat(tagName.length + 2);\n        let names: string[] = documentElement.getAttributeNames();\n        names.forEach(function (name) {\n            let attribute = documentElement.getAttribute(name);\n            let na = `${name}=\"${attribute}\"`;\n            if (first) {\n                first = false;\n                mesmerStartTag += \" \" + na;\n            } else {\n                mesmerStartTag += \"\\n\" + pad + na;\n            }\n        });\n        mesmerStartTag += \">\";\n        //console.log(mesmerStartTag);\n    }\n\n    /**\n     *  Set title.\n     */\n    setTitle(xml);\n\n    /**\n     * Generate molecules table.\n     */\n    initMolecules(xml);\n    displayMoleculesTable();\n\n    /**\n     * Generate reactions table.\n     */\n    initReactions(xml);\n    displayReactionsTable();\n    displayReactionsDiagram();\n\n    /**\n     * Generate conditions table.\n     */\n    initConditions(xml);\n    displayConditions();\n\n    /**\n     * Generate parameters table.\n     */\n    initModelParameters(xml);\n    displayModelParameters();\n\n    /**\n     * Generate control table.\n     */\n    initControl(xml);\n    displayControl();\n}\n\nlet conditions: Conditions;\n\n/**\n * Parse xml to initialise conditions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initConditions(xml: XMLDocument): void {\n    let me_conditions_s: string = 'me:conditions';\n    console.log(me_conditions_s);\n    let xml_conditions: Element = getSingularElement(xml, me_conditions_s);\n    // Set conditions_title.\n    conditions_title = document.getElementById(\"conditions_title\");\n    if (conditions_title != null) {\n        conditions_title.innerHTML = \"Conditions\";\n    }\n    // BathGas\n    let xml_bathGas: Element = getSingularElement(xml_conditions, 'me:bathGas');\n    let attributes: Map<string, string> = getAttributes(xml_bathGas);\n    let bathGas: BathGas = new BathGas(attributes, get(molecules, xml_bathGas.childNodes[0].nodeValue));\n    // PTs\n    let xml_PTs: Element = getSingularElement(xml_conditions, 'me:PTs');\n    let xml_PTPairs: HTMLCollectionOf<Element> = xml_PTs.getElementsByTagName('me:PTpair');\n    // Process each PTpair.\n    let PTs: PTpair[] = [];\n    for (let i = 0; i < xml_PTPairs.length; i++) {\n        PTs.push(new PTpair(getAttributes(xml_PTPairs[i])));\n    }\n    conditions = new Conditions(bathGas, PTs);\n}\n\nlet modelParameters: ModelParameters;\n\n/**\n * Parses xml to initialise modelParameters.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initModelParameters(xml: XMLDocument): void {\n    let me_modelParameters_s: string = 'me:modelParameters';\n    console.log(me_modelParameters_s);\n    let xml_modelParameters: Element = getSingularElement(xml, me_modelParameters_s);\n    // Set modelParameters_title.\n    modelParameters_title = document.getElementById(\"modelParameters_title\");\n    if (modelParameters_title != null) {\n        modelParameters_title.innerHTML = \"Model Parameters\";\n    }\n    // GrainSize\n    let xml_grainSize: Element = getSingularElement(xml_modelParameters, 'me:grainSize');\n    let attributes: Map<string, string> = getAttributes(xml_grainSize);\n    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_grainSize)));\n    let grainSize: GrainSize = new GrainSize(attributes, value);\n    // EnergyAboveTheTopHill\n    let xml_energyAboveTheTopHill: Element = getSingularElement(xml_modelParameters, 'me:energyAboveTheTopHill');\n    let energyAboveTheTopHill: number = parseFloat(getNodeValue(getFirstChildNode(xml_energyAboveTheTopHill)));\n    modelParameters = new ModelParameters(grainSize, energyAboveTheTopHill);\n}\n\nlet control: Control;\n\n/**\n * Parses xml to initialise control.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initControl(xml: XMLDocument): void {\n    let me_control_s: string = 'me:control';\n    console.log(me_control_s);\n    let xml_control: Element = getSingularElement(xml, me_control_s);\n    // Set control_title.\n    let control_title = document.getElementById(\"control_title\");\n    if (control_title != null) {\n        control_title.innerHTML = \"Control\";\n    }\n    // me:testDOS\n    let xml_testDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:testDOS');\n    let testDOS: boolean | undefined;\n    if (xml_testDOS.length > 0) {\n        testDOS = true;\n    }\n    // me:printSpeciesProfile\n    let xml_printSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printSpeciesProfile');\n    let printSpeciesProfile: boolean | undefined;\n    if (xml_printSpeciesProfile.length > 0) {\n        printSpeciesProfile = true;\n    }\n    // me:testMicroRates\n    let xml_testMicroRates: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:testMicroRates');\n    let testMicroRates: boolean | undefined;\n    if (xml_testMicroRates.length > 0) {\n        testMicroRates = true;\n    }\n    // me:testRateConstant\n    let xml_testRateConstant: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:testRateConstant');\n    let testRateConstant: boolean | undefined;\n    if (xml_testRateConstant.length > 0) {\n        testRateConstant = true;\n    }\n    // me:printGrainDOS\n    let xml_printGrainDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printGrainDOS');\n    let printGrainDOS: boolean | undefined;\n    if (xml_printGrainDOS.length > 0) {\n        printGrainDOS = true;\n    }\n    // me:printCellDOS\n    let xml_printCellDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printCellDOS');\n    let printCellDOS: boolean | undefined;\n    if (xml_printCellDOS.length > 0) {\n        printCellDOS = true;\n    }\n    // me:printReactionOperatorColumnSums\n    let xml_printReactionOperatorColumnSums: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printReactionOperatorColumnSums');\n    let printReactionOperatorColumnSums: boolean | undefined;\n    if (xml_printReactionOperatorColumnSums.length > 0) {\n        printReactionOperatorColumnSums = true;\n    }\n    // me:printTunnellingCoefficients\n    let xml_printTunnellingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printTunnellingCoefficients');\n    let printTunnellingCoefficients: boolean | undefined;\n    if (xml_printTunnellingCoefficients.length > 0) {\n        printTunnellingCoefficients = true;\n    }\n    // me:printGrainkfE\n    let xml_printGrainkfE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printGrainkfE');\n    let printGrainkfE: boolean | undefined;\n    if (xml_printGrainkfE.length > 0) {\n        printGrainkfE = true;\n    }\n    // me:printGrainBoltzmann\n    let xml_printGrainBoltzmann: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printGrainBoltzmann');\n    let printGrainBoltzmann: boolean | undefined;\n    if (xml_printGrainBoltzmann.length > 0) {\n        printGrainBoltzmann = true;\n    }\n    // me:printGrainkbE\n    let xml_printGrainkbE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printGrainkbE');\n    let printGrainkbE: boolean | undefined;\n    if (xml_printGrainkbE.length > 0) {\n        printGrainkbE = true;\n    }\n    // me:eigenvalues\n    let xml_eigenvalues: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:eigenvalues');\n    let eigenvalues: number | undefined;\n    if (xml_eigenvalues.length > 0) {\n        eigenvalues = parseFloat(getNodeValue(getFirstChildNode(xml_eigenvalues[0])));\n    }\n    // me:hideInactive\n    let xml_hideInactive: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:hideInactive');\n    let hideInactive: boolean | undefined;\n    if (xml_hideInactive.length > 0) {\n        hideInactive = true;\n    }\n    // me:diagramEnergyOffset\n    let xml_diagramEnergyOffset: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:diagramEnergyOffset');\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined;\n    if (xml_diagramEnergyOffset.length > 0) {\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffset = new DiagramEnergyOffset(getAttributes(xml_diagramEnergyOffset[0]), value);\n    }\n\n    control = new Control(testDOS, printSpeciesProfile, testMicroRates, testRateConstant,\n        printGrainDOS, printCellDOS, printReactionOperatorColumnSums, printTunnellingCoefficients, printGrainkfE,\n        printGrainBoltzmann, printGrainkbE, eigenvalues, hideInactive, diagramEnergyOffset);\n}\n\n/**\n * Parses xml to initialise reactions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initReactions(xml: XMLDocument): void {\n    let reactionList_s: string = 'reactionList';\n    console.log(reactionList_s);\n    let xml_reactionList: Element = getSingularElement(xml, reactionList_s);\n    let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName('reaction');\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    // Process each reaction.\n    if (xml_reactions_length == 0) {\n        //return;\n        throw new Error(\"No reactions: There should be at least 1!\");\n    }\n    // Set reactions_title.\n    reactions_title = document.getElementById(\"reactions_title\");\n    if (reactions_title != null) {\n        reactions_title.innerHTML = \"Reactions\";\n    }\n    for (let i = 0; i < xml_reactions_length; i++) {\n        let attributes: Map<string, string> = getAttributes(xml_reactions[i]);\n        let reactionID = attributes.get(\"id\");\n        if (reactionID == null) {\n            throw new Error(\"reactionID is null\");\n        }\n        if (reactionID != null) {\n            console.log(\"id=\" + reactionID);\n            // Load reactants.\n            let reactants: Map<string, Reactant> = new Map([]);\n            let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName('reactant');\n            //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n            for (let j = 0; j < xml_reactants.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_reactants[j], 'molecule');\n                let moleculeID: string = getAttribute(xml_molecule, \"ref\");\n                reactants.set(moleculeID, new Reactant(getAttributes(xml_molecule),\n                    get(molecules, moleculeID)));\n            }\n            // Load products.\n            let products: Map<string, Product> = new Map([]);\n            let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName('product');\n            //console.log(\"xml_products.length=\" + xml_products.length);\n            for (let j = 0; j < xml_products.length; j++) {\n                let xml_molecule = getFirstElement(xml_products[j], 'molecule');\n                let moleculeID: string = getAttribute(xml_molecule, \"ref\");\n                products.set(moleculeID,\n                    new Product(getAttributes(xml_molecule),\n                        get(molecules, moleculeID)));\n            }\n            // Load MCRCMethod.\n            //console.log(\"Load MCRCMethod...\");\n            let mCRCMethod: MCRCMethod | undefined;\n            let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName('me:MCRCMethod');\n            //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n            //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n            if (xml_MCRCMethod.length > 0) {\n                let attributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                let name: string | undefined = attributes.get(\"name\");\n                if (name == null) {\n                    let type = attributes.get(\"xsi:type\");\n                    if (type != null) {\n                        if (type === \"me:MesmerILT\") {\n                            let preExponential: PreExponential | undefined;\n                            let xml_preExponential: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:preExponential\");\n                            if (xml_preExponential != null) {\n                                if (xml_preExponential[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_preExponential[0])));\n                                    preExponential = new PreExponential(getAttributes(xml_preExponential[0]), value);\n                                }\n                            }\n                            let activationEnergy: ActivationEnergy | undefined;\n                            let xml_activationEnergy: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:activationEnergy\");\n                            if (xml_activationEnergy != null) {\n                                if (xml_activationEnergy[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_activationEnergy[0])));\n                                    activationEnergy = new ActivationEnergy(getAttributes(xml_activationEnergy[0]), value);\n                                }\n                            }\n                            let tInfinity: TInfinity | undefined;\n                            let xml_tInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:TInfinity\");\n                            if (xml_tInfinity != null) {\n                                if (xml_tInfinity[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_tInfinity[0])));\n                                    tInfinity = new NInfinity(getAttributes(xml_tInfinity[0]), value);\n                                }\n                            }\n                            let nInfinity: NInfinity | undefined;\n                            let xml_nInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:nInfinity\");\n                            if (xml_nInfinity != null) {\n                                if (xml_nInfinity[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_nInfinity[0])));\n                                    nInfinity = new NInfinity(getAttributes(xml_nInfinity[0]), value);\n                                }\n                            }\n                            mCRCMethod = new MesmerILT(attributes, preExponential, activationEnergy, tInfinity, nInfinity);\n                        }\n                    }\n                } else {\n                    mCRCMethod = new MCRCMethod(attributes, name);\n                }\n            }\n            // Load transition state.\n            //console.log(\"Load  transition state...\");\n            let xml_transitionState: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(\n                'me:transitionState');\n            let transitionState: TransitionState | undefined;\n            if (xml_transitionState.length > 0) {\n                let xml_molecule: Element = xml_transitionState[0].getElementsByTagName('molecule')[0];\n                let moleculeID: string | null = xml_molecule.getAttribute(\"ref\");\n                transitionState = new TransitionState(getAttributes(xml_molecule), get(molecules, moleculeID));\n                //console.log(\"transitionState moleculeID=\" + transitionState.molecule.getID());\n                //console.log(\"transitionState role=\" + transitionState.attributes.get(\"role\"));\n            }\n            // Load tunneling.\n            let xml_tunneling = xml_reactions[i].getElementsByTagName('me:tunneling');\n            let tunneling: Tunneling | undefined;\n            if (xml_tunneling.length > 0) {\n                tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n            }\n            let reaction = new Reaction(attributes, reactionID, reactants, products,\n                mCRCMethod, transitionState, tunneling);\n            reactions.set(reactionID, reaction);\n            //console.log(\"reaction=\" + reaction);\n        }\n    }\n}\n\n/**\n * Create a diagram.\n * @param {Map<string, Molecule>} molecules The molecules.\n * @param {Map<string, Reaction>} reactions The reactions.\n * @param {boolean} dark True for dark mode.\n * @returns {HTMLCanvasElement} The diagram.\n * @param {string} font The font to use.\n * @param {number} lw The line width of reactants, transition states and products.\n * @param {string} lwc The line width color to use.\n */\nfunction drawReactionDiagram(canvas: HTMLCanvasElement, molecules: Map<string, Molecule>,\n    reactions: Map<string, Reaction>, dark: boolean, font: string, lw: number, lwc: number): void {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    //ctx.fillStyle = background;\n\n    // Get text height for font size.\n    let th = getTextHeight(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants: Set<string> = new Set();\n    let products: Set<string> = new Set();\n    let intProducts: Set<string> = new Set();\n    let transitionStates: Set<string> = new Set();\n    let orders: Map<string, number> = new Map();\n    let energies: Map<string, number> = new Map();\n    let i: number = 0;\n    let energyMin: number = Number.MAX_VALUE;\n    let energyMax: number = Number.MIN_VALUE;\n    reactions.forEach(function (reaction, id) {\n        // Get TransitionState if there is one.\n        let transitionState: TransitionState | undefined = reaction.transitionState;\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string = reaction.getReactantsLabel();\n        reactants.add(reactantsLabel);\n        if (products.has(reactantsLabel)) {\n            intProducts.add(reactantsLabel);\n        }\n        let energy: number = reaction.getReactantsEnergy();\n        energyMin = Math.min(energyMin, energy);\n        energyMax = Math.max(energyMax, energy);\n        energies.set(reactantsLabel, energy);\n        let productsLabel: string = reaction.getProductsLabel();\n        products.add(productsLabel);\n        energy = reaction.getProductsEnergy();\n        energyMin = Math.min(energyMin, energy);\n        energyMax = Math.max(energyMax, energy);\n        energies.set(productsLabel, energy);\n        if (!orders.has(reactantsLabel)) {\n            orders.set(reactantsLabel, i);\n            i++;\n        }\n        if (orders.has(productsLabel)) {\n            i--;\n            let j: number = get(orders, productsLabel);\n            // Move product to end and shift everything back.\n            orders.forEach(function (value, key) {\n                if (value > j) {\n                    orders.set(key, value - 1);\n                }\n            });\n            // Insert transition state.\n            if (transitionState != undefined) {\n                let tsn: string = transitionState.getRef();\n                transitionStates.add(tsn);\n                orders.set(tsn, i);\n                energy = transitionState.molecule.getEnergy();\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(tsn, energy);\n                i++;\n            }\n            orders.set(productsLabel, i);\n            i++\n        } else {\n            if (transitionState != undefined) {\n                let tsn: string = transitionState.getRef();\n                transitionStates.add(tsn);\n                orders.set(tsn, i);\n                energy = transitionState.molecule.getEnergy();\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(tsn, energy);\n                i++;\n            }\n            orders.set(productsLabel, i);\n            i++;\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange: number = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n\n    // Create a lookup from order to label.\n    let reorders: string[] = [];\n    orders.forEach(function (value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0: number = 0;\n    let y0: number;\n    let x1: number;\n    let y1: number;\n    let xmax: number = 0;\n    let tw: number;\n    let textSpacing: number = 5; // Spacing between end of line and start of text.\n    let stepSpacing: number = 10; // Spacing between steps.\n    let reactantsInXY: Map<string, number[]> = new Map();\n    let reactantsOutXY: Map<string, number[]> = new Map();\n    let productsInXY: Map<string, number[]> = new Map();\n    let productsOutXY: Map<string, number[]> = new Map();\n    let transitionStatesInXY: Map<string, number[]> = new Map();\n    let transitionStatesOutXY: Map<string, number[]> = new Map();\n    reorders.forEach(function (value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines.)\n        // The code is left here commented out for reference.\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [x0, y0]);\n        reactantsOutXY.set(value, [x1, y1]);\n        if (products.has(value)) {\n            productsInXY.set(value, [x0, y0]);\n            productsOutXY.set(value, [x1, y1]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [x0, y0]);\n            transitionStatesOutXY.set(value, [x1, y1]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + (4 * th) + (2 * lw);\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n\n    let originalCanvasHeight = canvas.height;\n\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n\n\n    // Go through reactions and draw connecting lines.\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let transitionState: TransitionState | undefined = reaction.transitionState;\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string = reaction.getReactantsLabel();\n        let productsLabel: string = reaction.getProductsLabel();\n        let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n        let productInXY: number[] = get(productsInXY, productsLabel);\n        if (transitionState != undefined) {\n            let transitionStateLabel: string = transitionState.getRef();\n            let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                transitionStateInXY[1]);\n            let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n            drawLine(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                productInXY[0], productInXY[1]);\n        } else {\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1],\n                productInXY[0], productInXY[1]);\n        }\n    });\n\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(reactantsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(reactantsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(productsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(productsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        if (intProducts.has(value)) {\n            drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        } else {\n            drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n        }\n    });\n    transitionStates.forEach(function (value) {\n        let v: any;\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(transitionStatesInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(transitionStatesOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\n\n/**\n * Display molecules table.\n */\nfunction displayMoleculesTable(): void {\n    if (molecules.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let moleculesTable = getTH([\n        \"Name\",\n        \"Energy<br>kJ/mol\",\n        \"Rotation constants<br>cm<sup>-1</sup>\",\n        \"Vibration frequencies<br>cm<sup>-1</sup>\"]);\n    molecules.forEach(function (molecule, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"molecule=\" + molecule);\n        let energyNumber: number = molecule.getEnergy();\n        let energy: string;\n        if (energyNumber == null) {\n            energy = \"\";\n        } else {\n            energy = energyNumber.toString();\n        }\n        //console.log(\"energy=\" + energy);\n        let rotationConstants: string = \"\";\n        let rotConsts: number[] | undefined = molecule.getRotationConstants();\n        if (rotConsts != undefined) {\n            rotationConstants = arrayToString(rotConsts, \" \");\n        }\n        let vibrationFrequencies: string = \"\";\n        let vibFreqs: number[] | undefined = molecule.getVibrationFrequencies();\n        if (vibFreqs != undefined) {\n            vibrationFrequencies = arrayToString(vibFreqs, \" \");\n        }\n        moleculesTable += getTR(getTD(id)\n            + getTD(getInput(\"number\", id + \"_energy\", \"setEnergy(this)\", energy))\n            + getTD(rotationConstants, true)\n            + getTD(vibrationFrequencies, true));\n    });\n    molecules_table = document.getElementById(\"molecules_table\");\n    if (molecules_table !== null) {\n        molecules_table.innerHTML = moleculesTable;\n    }\n}\n\n/**\n * Display reactions table.\n */\nfunction displayReactionsTable(): void {\n    if (reactions.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let reactionsTable = getTH([\"ID\", \"Reactants\", \"Products\", \"Transition State\",\n        \"PreExponential\", \"Activation Energy\", \"TInfinity\", \"NInfinity\"]);\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        let reactants: string = arrayToString(Array.from(reaction.reactants.keys()), \" \");\n        let products: string = arrayToString(Array.from(reaction.products.keys()), \" \");\n        let transitionState: string = \"\";\n        let preExponential: string = \"\";\n        let activationEnergy: string = \"\";\n        let tInfinity: string = \"\";\n        let nInfinity: string = \"\";\n        if (reaction.transitionState != undefined) {\n            let name: string | undefined = reaction.transitionState.attributes.get(\"name\");\n            if (name != null) {\n                transitionState = name;\n            }\n        }\n        if (reaction.mCRCMethod != undefined) {\n            if (reaction.mCRCMethod instanceof MesmerILT) {\n                if (reaction.mCRCMethod.preExponential != null) {\n                    preExponential = reaction.mCRCMethod.preExponential.value.toString() + \" \"\n                        + reaction.mCRCMethod.preExponential.attributes.get(\"units\");\n                }\n                if (reaction.mCRCMethod.activationEnergy != null) {\n                    activationEnergy = reaction.mCRCMethod.activationEnergy.value.toString() + \" \"\n                        + reaction.mCRCMethod.activationEnergy.attributes.get(\"units\");\n                }\n                if (reaction.mCRCMethod.tInfinity != null) {\n                    tInfinity = reaction.mCRCMethod.tInfinity.toString();\n                }\n                if (reaction.mCRCMethod.nInfinity != null) {\n                    nInfinity = reaction.mCRCMethod.nInfinity.value.toString();\n                }\n            } else {\n                if (reaction.mCRCMethod.attributes.get(\"name\") == \"RRKM\") {\n                } else {\n                    throw new Error(\"Unexpected mCRCMethod: \" + reaction.mCRCMethod);\n                }\n            }\n        }\n        reactionsTable += getTR(getTD(id) + getTD(reactants) + getTD(products) + getTD(transitionState)\n            + getTD(preExponential, true) + getTD(activationEnergy, true) + getTD(tInfinity, true)\n            + getTD(nInfinity, true));\n        reactions_table = document.getElementById(\"reactions_table\");\n        if (reactions_table !== null) {\n            reactions_table.innerHTML = reactionsTable;\n        }\n    });\n}\n\n/**\n * Display reactions diagram.\n */\nfunction displayReactionsDiagram(): void {\n    if (reactions.size > 1) {\n        // Set reactions_diagram_title.\n        reactions_diagram_title = document.getElementById(\"reactions_diagram_title\");\n        if (reactions_diagram_title != null) {\n            reactions_diagram_title.innerHTML = \"Diagram\";\n        }\n        // Display the diagram.\n        let canvas: HTMLCanvasElement | null = document.getElementById(\"reactions_diagram\") as HTMLCanvasElement;\n        let font: string = \"14px Arial\";\n        let dark: boolean = true;\n        let lw: number = 4;\n        let lwc: number = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            drawReactionDiagram(canvas, molecules, reactions, dark, font, lw, lwc);\n        }\n    }\n}\n\n/**\n * Display conditions.\n */\nfunction displayConditions(): void {\n    let bathGas_element: HTMLElement | null = document.getElementById(\"bathGas\");\n    if (bathGas_element != null) {\n        bathGas_element.innerHTML = \"Bath Gas \" + conditions.bathGas.molecule.getID();\n    }\n    let PTs_element: HTMLElement | null = document.getElementById(\"PT_table\");\n    let table: string = getTH([\"P\", \"T\"]);\n    if (PTs_element != null) {\n        conditions.pTs.forEach(function (pTpair) {\n            table += getTR(getTD(pTpair.P.toString()) + getTD(pTpair.T.toString()));\n        });\n        PTs_element.innerHTML = table;\n    }\n}\n\n/**\n * Display modelParameters.\n */\nfunction displayModelParameters(): void {\n    let modelParameters_element: HTMLElement | null = document.getElementById(\"modelParameters_table\");\n    let table: string = getTH([\"Parameter\", \"Value\"]);\n    table += getTR(getTD(\"Grain Size\") + getTD(modelParameters.grainSize.value.toString()));\n    table += getTR(getTD(\"Energy Above The Top Hill\") + getTD(modelParameters.energyAboveTheTopHill.toString()));\n\n    if (modelParameters_element != null) {\n        modelParameters_element.innerHTML = table;\n    }\n}\n\n/**\n * Display control.\n */\nfunction displayControl(): void {\n    let control_table_element: HTMLElement | null = document.getElementById(\"control_table\");\n    let table: string = getTH([\"Control\", \"Value\"]);\n    if (control.testDOS != undefined) {\n        table += getTR(getTD(\"me.testDOS\") + getTD(\"\"));\n    }\n    if (control.printSpeciesProfile != undefined) {\n        table += getTR(getTD(\"me.printSpeciesProfile\") + getTD(\"\"));\n    }\n    if (control.testMicroRates != undefined) {\n        table += getTR(getTD(\"me.testMicroRates\") + getTD(\"\"));\n    }\n    if (control.testRateConstant != undefined) {\n        table += getTR(getTD(\"me.testRateConstant\") + getTD(\"\"));\n    }\n    if (control.printGrainDOS != undefined) {\n        table += getTR(getTD(\"me.printGrainDOS\") + getTD(\"\"));\n    }\n    if (control.printCellDOS != undefined) {\n        table += getTR(getTD(\"me.printCellDOS\") + getTD(\"\"));\n    }\n    if (control.printReactionOperatorColumnSums != undefined) {\n        table += getTR(getTD(\"me.printReactionOperatorColumnSums\") + getTD(\"\"));\n    }\n    if (control.printTunnellingCoefficients != undefined) {\n        table += getTR(getTD(\"me.printTunnellingCoefficients\") + getTD(\"\"));\n    }\n    if (control.printGrainkfE != undefined) {\n        table += getTR(getTD(\"me.printGrainkfE\") + getTD(\"\"));\n    }\n    if (control.printGrainBoltzmann != undefined) {\n        table += getTR(getTD(\"me.printGrainBoltzmann\") + getTD(\"\"));\n    }\n    if (control.printGrainkbE != undefined) {\n        table += getTR(getTD(\"me.printGrainkbE\") + getTD(\"\"));\n    }\n    if (control.eigenvalues != undefined) {\n        table += getTR(getTD(\"me.eigenvalues\") + getTD(control.eigenvalues.toString()));\n    }\n    if (control.hideInactive != undefined) {\n        table += getTR(getTD(\"me.hideInactive\") + getTD(\"\"));\n    }\n    if (control.diagramEnergyOffset != undefined) {\n        table += getTR(getTD(\"me.diagramEnergyOffset\") + getTD(control.diagramEnergyOffset.value.toString()));\n    }\n    if (control_table_element != null) {\n        control_table_element.innerHTML = table;\n    }\n}\n\n/**\n * Set the energy of a molecule when the energy input value is changed.\n * @param input The input element. \n */\nexport function setEnergy(input: HTMLInputElement): void {\n    let id_energy: string = input.id;\n    let moleculeID: string = id_energy.split(\"_\")[0];\n    let molecule: Molecule | undefined = molecules.get(moleculeID);\n    if (molecule != undefined) {\n        let inputValue: number = parseFloat(input.value);\n        if (!isNaN(inputValue)) {\n            molecule.setEnergy(inputValue);\n            console.log(\"Energy of \" + moleculeID + \" set to \" + inputValue);\n        } else {\n            alert(\"Energy input for \" + moleculeID + \" is not a number\");\n            let inputElement = document.getElementById(id_energy) as HTMLInputElement;\n            inputElement.value = molecule.getEnergy().toString();\n        }\n        //console.log(\"molecule=\" + molecule);\n    }\n}\n\n(window as any).setEnergy = setEnergy;\n\n/**\n * Save to XML file.\n */\nwindow.saveXML = function () {\n    console.log(\"saveXML\");\n\n    const pad: string = \"  \";\n    let level: number;\n    const padding2: string = pad.repeat(2);\n\n    // Create me.title.\n    let title_xml = \"\\n\" + pad + getTag(title, \"me:title\");\n\n    // Create moleculeList.\n    level = 2;\n    let moleculeList: string = \"\";\n    molecules.forEach(function (molecule, id) {\n        moleculeList += molecule.toXML(\"molecule\", pad, level);\n    });\n    moleculeList = getTag(moleculeList, \"moleculeList\", undefined, undefined, undefined, pad, true);\n\n    // Create reactionList.\n    level = 2;\n    let reactionList: string = \"\";\n    reactions.forEach(function (reaction, id) {\n        reactionList += reaction.toXML(\"reaction\", pad, level);\n    });\n    reactionList = getTag(reactionList, \"reactionList\", undefined, undefined, undefined, pad, true);\n\n    // Create me.Conditions\n    let xml_conditions: string = conditions.toXML(pad, pad);\n\n    // Create modelParameters\n    let xml_modelParameters: string = modelParameters.toXML(pad, pad);\n\n    // create me.control\n    let xml_control: string = control.toXML(pad, pad);\n\n    // Create a new Blob object from the data\n    let blob = new Blob([header, mesmerStartTag, title_xml, moleculeList, reactionList,\n        xml_conditions, xml_modelParameters, xml_control, mesmerEndTag],\n        { type: \"text/plain\" });\n\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    a.download = input_xml_filename; // Replace with your desired filename\n\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n\n}"]}