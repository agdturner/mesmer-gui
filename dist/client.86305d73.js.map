{"version":3,"sources":["../../../src/client/cjm/util.ts","../../../src/client/cjm/xml.ts","../../../src/client/cjm/html.ts","../../../src/client/cjm/classes.ts","../../../src/client/cjm/functions.ts","../../../src/client/cjm/molecule.ts","../../../src/client/cjm/reaction.ts","../../../src/client/cjm/canvas.ts","../../../src/client/cjm/conditions.ts","../../../src/client/cjm/modelParameters.ts","../../../src/client/cjm/control.ts","../../../src/client/cjm/client.ts","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"client.86305d73.js","sourceRoot":"../html","sourcesContent":["/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0) ) + newMin;\n}","/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param {Element} element The xml element to search in.\n * @returns {ChildNode} The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a ChildNode.\n * @param {ChildNode} node The node to get the nodeValue of.\n * @returns {string} The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: ChildNode): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param {Map<string, any>} attributes The attributes (optional).\n * @param {string} attributeName The name of the attribute (optional).\n * @param {any} attributeValue The value of the attribute (optional).\n * @param {string} padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>,\n    attributeName?: string, attributeValue?: any, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    if (attributeName && attributeValue) {\n        s += ' ' + attributeName + '=\"' + attributeValue.toString() + '\"';\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param delimeter Whether values are delimeted.\n * @param {Map<string, any>} attributes The attributes (optional).\n * @param {string} attributeName The name of the attribute (optional).\n * @param {any} attributeValue The value of the attribute (optional).\n * @param {string} padding The padding (optional).\n * @param {boolean} padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>,\n    attributeName?: string, attributeValue?: any, padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, attributeName, attributeValue, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param {Element} element The element to get the attributes of.\n * @returns {Map<string, string>} The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName, attributeValue);\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param {XMLDocument | Element} xml The XML document or element.\n * @param {string} tagName The tag name.\n * @returns {Element} The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {;\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}\n\n/**\n * Convert XML to HTML.\n * @param {string} text The XML text.\n */\nexport function toHTML(text: string): string {\n    return text.replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\n/g, \"<br>\")\n        .replace(/\\t/g, \"&nbsp;&nbsp;&nbsp;&nbsp;\")\n        .replace(/  /g, \"&nbsp;&nbsp;\");\n}","/**\n * Create a table header row.\n * @param {string[]} headings The headings.\n * @returns {string} Table row with headings.\n */\nexport function getTH(headings: string[]): string {\n    var th = \"\";\n    for (let i = 0; i < headings.length; i++) {\n        th += \"<th>\" + headings[i] + \"</th>\";\n    }\n    return getTR(th);\n}\n\n/**\n * Create a table cell.\n * @param {string} x A cell for a table row.\n * @param {boolean} contentEditable If true then the cell is set to be editable.  \n * @returns {string} x wrapped in td tags.\n */\nexport function getTD(x: string, contentEditable: boolean = false): string {\n    let r: string = \"<td\";\n    if (contentEditable) {\n        r += \" contenteditable=\\\"true\\\"\";\n    }\n    r += \">\" + x + \"</td>\";\n    return r;\n}\n\n/**\n * Create a table row.\n * @param {string} x A row for a table.\n * @returns {string} x wrapped in tr tags.\n */\nexport function getTR(x: string): string {\n    return \"<tr>\" + x + \"</tr>\\n\";\n}\n\n/**\n * Create a table.\n * @param {string} x Table rows for a table.\n * @returns {string} x wrapped in table tags.\n */\nexport function getTable(x: string): string {\n    return \"<table>\" + x + \"</table>\";\n}\n\n/**\n * Create a div.\n * @param {string} x The content of the div.\n * @param {string | null} id The id of the div.\n * @param {string | null} html_class The class of the div.\n * @returns {string} x wrapped in div tags.\n */\nexport function getDiv(x: string, id: string | null, html_class: string | null): string {\n    let r: string = \"<div\";\n    if (id !== null) {\n        r += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (html_class !== null) {\n        r += \" class=\\\"\" + html_class + \"\\\"\";\n    }\n    return r + \">\" + x + \"</div>\";\n}\n\n/**\n * Create a input.\n * @param {string} type The input type (e.g. text, number).\n * @param {string | null} id The id of the button.\n * @param {string | null} func The function called on a change.\n * @param {string | null} value The value of the input.\n * @returns {string} An input HTML element.\n */\nexport function getInput(type: string, id: string | null, func: string | null,\n    value : string | null): string {\n    let r: string = \"<input type=\\\"\" + type + \"\\\"\";\n    if (id !== null) {\n        r += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (func !== null) {\n        r += \" onchange=\\\"\" + func + \"\\\"\";\n    }\n    if (value !== null) {\n        r += \" value=\\\"\" + value + \"\\\"\";\n    }\n    return r + \">\";\n}\n\n/**\n * Create a self closing tag.\n * @param {Map<string, string> | null} attributes The attributes.\n * @param {string} tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | null, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}","import { \n    getSelfClosingTag \n} from \"./html\";\n\nimport {\n    getTag\n} from \"./xml\";\n\n/**\n * A class for representing things with attributes.\n * @param {Map<string, string>} attributes The attributes.\n */\nexport abstract class Attributes {\n\n    /**\n     * The attributes.\n     */\n    attributes: Map<string, string>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns The name in lower case.\n     */\n    /*\n    get name(): string {\n        return this.constructor.name.toLowerCase().trim();\n    }\n    */\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.constructor.name + `(`;\n        this.attributes.forEach((value, key) => {\n            r += `${key}(${value}), `;\n        });\n        return r;\n    }\n\n    /**\n     * Get the tag representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns A tag representation.\n     */\n    toTag(tagName: string, padding?: string): string {\n        let s = getSelfClosingTag(this.attributes, tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return \"\\n\" + s;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, padding?: string): string {\n        return getTag(\"\", tagName, this.attributes, undefined, undefined, padding, false);\n    }\n}\n\n/**\n * A class for representing a number with attributes.\n * e.g. A value with units and measurement/uncertainty information.\n */\nexport class NumberWithAttributes extends Attributes {\n    value: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(tagName: string, padding?: string): string {\n        return getTag(this.value.toString().trim(), tagName, this.attributes, undefined, undefined, padding, false);\n    }\n}\n\n/**\n * A class for representing numerical values with a shared attributes.\n * e.g. An array values sharing the same units and measurement details.\n */\nexport class NumberArrayWithAttributes extends Attributes {\n\n    /**\n     * The values.\n     */\n    values: number[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \",\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number[]} values The values.\n     * @param {string} delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: number[], delimiter?: string) {\n        super(attributes);\n        this.values = values;\n        if (delimiter) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param {string} delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, padding?: string): string {\n        return getTag(this.values.toString().replaceAll(\",\", this.delimiter), tagName, this.attributes, undefined, undefined, padding, false);\n    }\n}","/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>): string {\n    if (map == null) {\n        return \"\";\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(', ');\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter: string): string {\n    if (array == null) {\n        return \"\";\n    }\n    if (delimiter == null) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n */\nexport function toNumberArray(s: string[]): number[] {\n    let r: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        r.push(parseFloat(s[i]));\n    }\n    return r;\n}\n\n/**\n * Is the string numeric in that it can be parsed as a float that is not a NaN?\n * @param {string} s The string.\n * @returns True if the string can be parsed as a float that is not a NaN and false otherwise.\n */\nexport function isNumeric(s: string): boolean {\n    return !isNaN(parseFloat(s));\n}","import {\n    Attributes, NumberArrayWithAttributes, NumberWithAttributes \n} from './classes.js';\n\nimport {\n    mapToString\n} from './functions.js';\n\nimport {\n    getTag\n} from './xml.js';\n\n/**\n * A class for representing an atom.\n * @param {Map<string, string>} attributes The attributes.\n * If there is no \"id\" or \"elementType\" key an error will be thrown.\n */\nexport class Atom extends Attributes {\n\n    /**\n     * @param attributes The attributes. If there is no \"id\" or \"elementType\" key an error will be thrown.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        let elementType: string | undefined = attributes.get(\"elementType\");\n        if (elementType == undefined) {\n            throw new Error('elementType is undefined');\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let s = super.toString();\n        return s + `)`;\n    }\n\n    /**\n     * @returns The id of the atom.\n     */\n    get id(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * @returns The element type of the atom.\n     */\n    get elementType(): string {\n        return this.attributes.get(\"elementType\") as string;\n    }\n}\n\n/**\n * A class for representing an atomic bond - a bond beteen two atoms.\n * @param {Map<string, string>} attributes The attributes.\n * @param {Atom} atomA One atom.\n * @param {Atom} atomB Another atom.\n * @param {string} order The order of the bond.\n */\nexport class Bond extends Attributes {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let s = super.toString();\n        return s + `)`;\n    }\n}\n\n\n/**\n * A class for representing a property.\n */\nexport class Property extends Attributes {\n\n    /**\n     * The property value.\n     */\n    property: NumberWithAttributes | NumberArrayWithAttributes;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {NumberWithAttributes | NumberArrayWithAttributes} property The property.\n     */\n    constructor(attributes: Map<string, string>, property: NumberWithAttributes | NumberArrayWithAttributes) {\n        super(attributes);\n        this.property = property;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + ` property(${this.property.toString()}))`;\n    }\n\n    /**\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string | undefined = undefined;\n        if (pad != undefined) {\n            if (padding != undefined) {\n                padding1 = padding + pad;\n            }\n        }\n        if (this.property instanceof NumberWithAttributes) {\n            return getTag(this.property.toXML(\"scalar\", padding1), \"property\", this.attributes, undefined, undefined, padding, true);\n        } else {\n            return getTag(this.property.toXML(\"array\", padding1), \"property\", this.attributes, undefined, undefined, padding, true);\n        }\n    }\n}\n\n/**\n * Represents the deltaEDown class.\n */\nexport class DeltaEDown extends NumberWithAttributes {\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing an energy transfer model.\n */\nexport class EnergyTransferModel extends Attributes {\n\n    /**\n     * The DeltaEDown.\n     */\n    deltaEDown: DeltaEDown;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {DeltaEDown} deltaEDown The DeltaEDown.\n     */\n    constructor(attributes: Map<string, string>, deltaEDown: DeltaEDown) {\n        super(attributes);\n        this.deltaEDown = deltaEDown;\n    }\n\n    /**\n     * @param padding - Optional padding string for formatting the XML output.\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        if (pad == undefined) {\n            return getTag(this.deltaEDown.toXML(\"me.deltaEDown\", padding), \"me:energyTransferModel\",\n             this.attributes, undefined, undefined, padding, false);\n        } else {\n            return getTag(this.deltaEDown.toXML(\"me.deltaEDown\", padding), \"energyTransferModel\",\n             undefined, undefined, undefined, padding, true);\n        }\n    }\n}\n\n/**\n * A class for representing a method for calculating the density of states.\n */\nexport class DOSCMethod {\n    type: string;\n    constructor(type: string) {\n        this.type = type;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return `DOSCMethod(type(${this.type}))`;\n    }\n\n    /**\n     * @param padding The padding (Optional).\n     * @returns A tag representation.\n     */\n    toTag(padding?: string): string {\n        let s: string = `<me.DOSCMethod xsi:type=\"${this.type}\"/>`;\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return \"\\n\" + s;\n    }\n}\n\n/**\n * A class for representing a molecule.\n * @param {string} id The id of the molecule.\n * @param {string} description The description of the molecule.\n * @param {boolean} active Indicates if the molecule is active.\n * @param {Map<string, Atom>} atoms A Map of atoms with keys as string atom ids and values as Atoms.\n * @param {Map<string, Bond>} bonds A Map of bonds with keys as string atom ids and values as Bonds.\n * @param {Map<string, Property>} properties A map of properties.\n * @param {EnergyTransferModel | null} energyTransferModel The energy transfer model.\n * @param {DOSCMethod | null} dOSCMethod The method for calculating density of states.\n */\nexport class Molecule extends Attributes {\n    id: string;\n    // Atoms\n    atoms: Map<string, Atom>;\n    // Bonds\n    bonds: Map<string, Bond>;\n    // Properties\n    properties: Map<string, Property>;\n    // EnergyTransferModel\n    energyTransferModel?: EnergyTransferModel;\n    // DOSCMethod\n    dOSCMethod?: DOSCMethod;\n\n    /**\n     * Create a molecule.\n     * @param {Map<string, string>} attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes known about are \"description\" and \"active\", but these do not exist for all molecules\n     * in Mesmer XML input/output files.\n     * @param {Map<string, Atom>} atoms A Map of atoms with keys as ids.\n     * @param {Map<string, Bond>} bonds A Map of bonds with. The keys combine the ids of the two bonded atoms.\n     * @param {Map<string, Property>} properties A map of properties.\n     * @param {EnergyTransferModel | null} energyTransferModel The energy transfer model.\n     * @param {DOSCMethod | null} dOSCMethod The method for calculating density of states.\n     */\n    constructor(\n        attributes: Map<string, string>,\n        atoms: Map<string, Atom>,\n        bonds: Map<string, Bond>,\n        properties: Map<string, Property>,\n        energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod) {\n        super(attributes);\n        let id: string | undefined = this.attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        this.id = id;\n        this.atoms = atoms;\n        this.bonds = bonds;\n        this.properties = properties;\n        this.energyTransferModel = energyTransferModel;\n        this.dOSCMethod = dOSCMethod;\n    }\n\n    /** \n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = `Molecule(id(${this.getID()}), `;\n        let description: string | undefined = this.getDescription();\n        if (description != undefined) {\n            r += `description(${description}), `;\n        }\n        let active: boolean | undefined = this.getActive();\n        if (active != undefined) {\n            r += `active(${active}), `;\n        }\n        if (this.atoms.size > 0) {\n            r += `atoms(${mapToString(this.atoms)}), `;\n        }\n        if (this.bonds.size > 0) {\n            r += `bonds(${mapToString(this.bonds)}), `;\n        }\n        if (this.properties.size > 0) {\n            r += `properties(${mapToString(this.properties)}), `;\n        }\n        if (this.energyTransferModel) {\n            r += `energyTransferModel(${this.energyTransferModel.toString()}), `;\n        }\n        if (this.dOSCMethod) {\n            r += `dOSCMethod(${this.dOSCMethod.toString()}), `;\n        }\n        return r + `)`;\n    }\n\n    /**\n     * @return The id of the molecule.\n     */\n    getID(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * Gets the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */\n    getDescription(): string | undefined {\n        return this.attributes.get(\"description\");\n    }\n\n    /**\n     * Gets the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        let active = this.attributes.get(\"active\");\n        if (active != undefined) {\n            return true;\n        }\n        return active;\n    }\n\n    /**\n     * @returns {number} The energy of the molecule or zero if the energy is not set.\n     * @throws An error if \"me.ZPE\" is a property, but is not mapped to a PropertyScalar.\n     */\n    getEnergy(): number {\n        let zpe: Property | undefined = this.properties.get('me:ZPE');\n        if (zpe == undefined) {\n            return 0;\n        }\n        if (zpe.property instanceof NumberWithAttributes) {\n            return zpe.property.value;\n        } else {\n            throw new Error(\"Expected a PropertyScalar but got a PropertyArray and not sure how to handle that.\");\n        }\n    }\n\n    /**\n     * Set the Energy of the molecule.\n     * @param {number} energy The energy of the molecule in kcal/mol.\n     */\n    setEnergy(energy: number) {\n        let property: Property | undefined = this.properties.get('me:ZPE');\n        if (property == undefined) {\n            throw new Error(\"No me.ZPE property found\");\n        }\n        if (property.property instanceof NumberArrayWithAttributes) {\n            throw new Error(\"Expected a NumberWithAttributes but got a NumberArrayWithAttributes and not sure how to handle that.\");\n        } else {\n            property.property.value = energy;\n        }\n    }\n\n    /**\n     * Get the RotationConstants of the molecule.\n     * @returns The RotationConstants of the molecule.\n     */\n    getRotationConstants(): number[] | undefined {\n        let property: Property | undefined = this.properties.get('me:rotConsts');\n        if (property != undefined) {\n            if (property.property != null) {\n                if (property.property instanceof NumberWithAttributes) {\n                    return [property.property.value];\n                } else {\n                    return property.property.values;\n                }\n            } else {\n                return undefined;\n            }\n        }\n        return property;\n    }\n\n    /**\n     * Get the VibrationFrequencies of the molecule.\n     * @returns The VibrationFrequencies of the molecule.\n     */\n    getVibrationFrequencies(): number[] | undefined {\n        let property: Property | undefined = this.properties.get('me:vibFreqs');\n        if (property != undefined) {\n            if (property.property instanceof NumberWithAttributes) {\n                return [property.property.value];\n            } else if (property.property instanceof NumberArrayWithAttributes) {\n                return property.property.values;\n            } else {\n                return undefined;\n            }\n        }\n        return property;\n    }\n\n    /**\n     * @param {string} tagName The tag name.\n     * @param {string} pad The pad (Optional).\n     * @param {number} level The level of padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, pad?: string, level?: number): string {\n        // Padding\n        let padding0: string = \"\";\n        let padding1: string = \"\";\n        let padding2: string = \"\";\n        let padding3: string = \"\";\n        if (pad != undefined && level != undefined) {\n            padding0 = pad.repeat(level);\n            padding1 = padding0 + pad;\n            padding2 = padding1 + pad;\n            padding3 = padding2 + pad;\n        }\n        // Atoms\n        let atoms_xml: string = \"\";\n        for (let atom of this.atoms.values()) {\n            atoms_xml += atom.toTag(\"atom\", padding2);\n        }\n        if (this.atoms.size > 1) {\n            if (atoms_xml != \"\") {\n                atoms_xml = getTag(atoms_xml, \"atomArray\", undefined, undefined, undefined, padding1, true);\n            }\n        }\n        // Bonds\n        let bonds_xml: string = \"\";\n        for (let bond of this.bonds.values()) {\n            bonds_xml += bond.toTag(\"bond\", padding2);\n        }\n        if (bonds_xml != \"\") {\n            bonds_xml = getTag(bonds_xml, \"bondArray\", undefined, undefined, undefined, padding1, true);\n        }\n        // Properties\n        let properties_xml: string = \"\";\n        this.properties.forEach(property => {\n            let property_xml: string = \"\";\n            if (property.property instanceof NumberWithAttributes) {\n                property_xml += property.property.toXML(\"scalar\", padding3);\n            } else {\n                property_xml += property.property.toXML(\"array\", padding3);\n            }\n            properties_xml += getTag(property_xml, \"property\", property.attributes, undefined, undefined, padding2, true);\n        });\n        if (this.properties.size > 1) {\n            if (properties_xml != \"\") {\n                properties_xml = getTag(properties_xml, \"propertyList\", undefined, undefined, undefined, padding1, true);\n            }\n        }\n        // EnergyTransferModel\n        let energyTransferModel_xml: string = \"\";\n        if (this.energyTransferModel) {\n            energyTransferModel_xml = this.energyTransferModel.toXML(pad, padding1);\n        }\n        // DOSCMethod\n        let dOSCMethod_xml: string = \"\";\n        if (this.dOSCMethod) {\n            dOSCMethod_xml = this.dOSCMethod.toTag(padding1);\n        }\n        return getTag(atoms_xml + bonds_xml + properties_xml + energyTransferModel_xml + dOSCMethod_xml,\n            tagName, this.attributes, undefined, undefined, padding0, true);\n    }\n}","import {\n    mapToString\n} from './functions.js';\n\nimport {\n    Molecule\n} from './molecule.js';\n\nimport {\n    Attributes, NumberWithAttributes\n} from './classes.js';\n\nimport {\n    getTag\n} from './xml.js';\n\n/**\n * A class for representing a Reaction Molecule.\n */\nexport class ReactionMolecule extends Attributes {\n\n    /**\n     * A reference to the molecule.\n     */\n    molecule: Molecule;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Molecule} molecule The molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes);\n        this.molecule = molecule;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} pad The pad for an extra level of padding (Optional).\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, pad?: string | undefined, padding?: string | undefined): string {\n        let padding1: string = \"\";\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = this.toTag(\"molecule\", padding1);\n        return getTag(s, tagName, undefined, undefined, undefined, padding, true);\n    }\n}\n\n/**\n * A class for representing a reactant.\n * This is a molecule often with a role in a reaction.\n */\nexport class Reactant extends ReactionMolecule {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Molecule} molecule The molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, molecule);\n    }\n}\n\n/**\n * A class for representing a product.\n * This is a molecule produced in a reaction.\n */\nexport class Product extends ReactionMolecule {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Molecule} molecule The molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, molecule);\n    }\n\n}\n\n/**\n * A class for representing a transition state.\n */\nexport class TransitionState extends ReactionMolecule {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Molecule} molecule The molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, molecule);\n    }\n\n    /**\n     * A convenience method to get the ref (the molecule ID) of the transition state.\n     * @returns The ref of the transition state.\n     */\n    getRef(): string {\n        let s: string | undefined = this.attributes.get(\"ref\");\n        if (s == null) {\n            throw new Error('Attribute \"ref\" is undefined.');\n        }\n        return s;\n    }\n}\n\n\n/**\n * A class for representing the Arrhenius pre-exponential factor.\n */\nexport class PreExponential extends NumberWithAttributes {\n\n    /**\n     * A class for representing the Arrhenius pre-exponential factor.\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing the Arrhenius activation energy factor.\n */\nexport class ActivationEnergy extends NumberWithAttributes {\n\n    /**\n     * A class for representing the Arrhenius pre-exponential factor.\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing the reference temperature.\n */\nexport class TInfinity extends NumberWithAttributes {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing the modified Arrhenius parameter factor.\n */\nexport class NInfinity extends NumberWithAttributes {\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for representing tunneling.\n */\nexport class Tunneling extends Attributes {\n    \n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n    }\n}\n\n/**\n * A class for representing the MCRCMethod specifications.\n * Extended classes indicate how microcanonical rate constant is to be treated.\n */\nexport class MCRCMethod extends Attributes {\n\n    /**\n     * The name of the method.\n     */\n    mCRCMethodName: string;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} name The name or xsi:type of the method.\n     */\n    constructor(attributes: Map<string, string>, name: string) {\n        super(attributes);\n        this.mCRCMethodName = name;\n    }\n    toString() {\n        return `MCRCMethod(name(${this.mCRCMethodName}))`;\n    }\n}\n\n/**\n * A class for representing the inverse Laplace transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends MCRCMethod {\n\n    /**\n     * The pre-exponential factor.\n     */\n    preExponential: PreExponential | undefined;\n    \n    /**\n     * The activation energy.\n     */\n    activationEnergy: ActivationEnergy | undefined;\n    \n    /**\n     * The TInfinity.\n     */\n    tInfinity: TInfinity | undefined;\n    \n    /**\n     * The nInfinity.\n     */\n    nInfinity: NInfinity | undefined;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PreExponential | undefined} preExponential The pre-exponential factor.\n     * @param {ActivationEnergy | undefined} activationEnergy The activation energy.\n     * @param {TInfinity | undefined} tInfinity The TInfinity.\n     * @param {NInfinity | undefined} nInfinity The nInfinity.\n     */\n    constructor(attributes: Map<string, string>, preExponential: PreExponential | undefined,\n        activationEnergy: ActivationEnergy | undefined, tInfinity: TInfinity | undefined,\n        nInfinity: NInfinity | undefined) {\n        super(attributes, \"MesmerILT\");\n        this.preExponential = preExponential;\n        this.activationEnergy = activationEnergy;\n        this.tInfinity = tInfinity;\n        this.nInfinity = nInfinity;\n    }\n\n    toString() {\n        return `MesmerILT(${super.toString()}, ` +\n            `preExponential(${this.preExponential}), ` +\n            `activationEnergy(${this.activationEnergy}), ` +\n            `TInfinity(${this.tInfinity}), ` +\n            `nInfinity(${this.nInfinity}))`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} tagName The tag name.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(tagName: string, padding?: string | undefined): string {\n        let padding1: string = \"\";\n        if (padding != undefined) {\n            padding1 = padding + \"  \";\n        }\n        let preExponential_xml: string = \"\";\n        if (this.preExponential != undefined) {\n            preExponential_xml = this.preExponential.toXML(\"me.preExponential\", padding1);\n        }\n        let activationEnergy_xml: string = \"\";\n        if (this.activationEnergy != undefined) {\n            activationEnergy_xml = this.activationEnergy.toXML(\"me.activationEnergy\", padding1);\n        }\n        let tInfinity_xml: string = \"\";\n        if (this.tInfinity != undefined) {\n            tInfinity_xml = this.tInfinity.toXML(\"me.nInfinity\", padding1);\n        }\n        let nInfinity_xml: string = \"\";\n        if (this.nInfinity != undefined) {\n            nInfinity_xml = this.nInfinity.toXML(\"me.nInfinity\", padding1);\n        }\n        return getTag(preExponential_xml + activationEnergy_xml + tInfinity_xml + nInfinity_xml,\n            tagName, this.attributes, undefined, undefined, padding, true);\n    }\n}\n\n/**\n * A class for representing the Zhu-Nakamura crossing MCRCMethod.\n */\nexport class ZhuNakamuraCrossing extends MCRCMethod {\n    harmonicReactantDiabat_FC: number;\n    harmonicReactantDiabat_XO: number;\n    harmonicProductDiabat_DE: number;\n    exponentialProductDiabat_A: number;\n    exponentialProductDiabat_B: number;\n    exponentialProductDiabat_DE: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number} harmonicReactantDiabat_FC The harmonic reactant diabatic FC.\n     * @param {number} harmonicReactantDiabat_XO The harmonic reactant diabatic XO.\n     * @param {number} harmonicProductDiabat_DE The harmonic product diabatic DE.\n     * @param {number} exponentialProductDiabat_A The exponential product diabatic A.\n     * @param {number} exponentialProductDiabat_B The exponential product diabatic B.\n     * @param {number} exponentialProductDiabat_DE The exponential product diabatic DE.\n     */\n    constructor(attributes: Map<string, string>,\n        harmonicReactantDiabat_FC: number,\n        harmonicReactantDiabat_XO: number,\n        harmonicProductDiabat_DE: number,\n        exponentialProductDiabat_A: number,\n        exponentialProductDiabat_B: number,\n        exponentialProductDiabat_DE: number) {\n        super(attributes, \"ZhuNakamuraCrossing\");\n        this.harmonicReactantDiabat_FC = harmonicReactantDiabat_FC;\n        this.harmonicReactantDiabat_XO = harmonicReactantDiabat_XO;\n        this.harmonicProductDiabat_DE = harmonicProductDiabat_DE;\n        this.exponentialProductDiabat_A = exponentialProductDiabat_A;\n        this.exponentialProductDiabat_B = exponentialProductDiabat_B;\n        this.exponentialProductDiabat_DE = exponentialProductDiabat_DE;\n    }\n    toString() {\n        return `ZhuNakamuraCrossing(${super.toString()}, ` +\n            `harmonicReactantDiabat_FC(${this.harmonicReactantDiabat_FC.toString()}), ` +\n            `harmonicReactantDiabat_XO(${this.harmonicReactantDiabat_XO.toString()}), ` +\n            `harmonicProductDiabat_DE(${this.harmonicProductDiabat_DE.toString()}), ` +\n            `exponentialProductDiabat_A(${this.exponentialProductDiabat_A.toString()}), ` +\n            `exponentialProductDiabat_B(${this.exponentialProductDiabat_B.toString()}), ` +\n            `exponentialProductDiabat_DE(${this.exponentialProductDiabat_DE.toString()}))`;\n    }\n}\n\n/**\n * A class for representing the sum of states.\n * @param {string} units The units of energy.\n * @param {boolean} angularMomentum The angular momentum attribute.\n * @param {boolean} noLogSpline The no log spline attribute.\n * @param {SumOfStatesPoint[]} sumOfStatesPoints The sum of states points.\n */\n/*\nexport class SumOfStates extends NumberWithAttributes {\n    units: string;\n    angularMomentum: boolean;\n    noLogSpline: boolean;\n    sumOfStatesPoints: SumOfStatesPoint[];\n    constructor(units: string, angularMomentum: boolean, noLogSpline: boolean, sumOfStatesPoints: SumOfStatesPoint[]) {\n        this.units = units;\n        this.angularMomentum = angularMomentum;\n        this.noLogSpline = noLogSpline;\n        this.sumOfStatesPoints = sumOfStatesPoints;\n    }\n    toString() {\n        return `SumOfStates(` +\n            `units(${this.units}), ` +\n            `angularMomentum(${this.angularMomentum.toString()}), ` +\n            `noLogSpline(${this.noLogSpline.toString()}), ` +\n            `sumOfStatesPoints(${arrayToString(this.sumOfStatesPoints, \" \")}))`;\n    }\n}\n*/\n\n/**\n * A class for representing a sum of states point.\n * @param {number} value The value of the point.\n * @param {number} energy The energy of the point.\n * @param {number} angMomMag The angular momentum magnitude of the point.\n */\n/*\nexport class SumOfStatesPoint {\n    value: number;\n    energy: number;\n    angMomMag: number;\n    constructor(value: number, energy: number, angMomMag: number) {\n        this.value = value;\n        this.energy = energy;\n        this.angMomMag = angMomMag;\n    }\n    toString() {\n        return `SumOfStatesPoint(` +\n            `value(${this.value}), ` +\n            `energy(${this.energy.toString()}), ` +\n            `angMomMag(${this.angMomMag.toString()}))`;\n    }\n}\n*/\n\n/**\n * A class for representing the DefinedSumOfStates MCRCMethod.\n * @param {string} name The name or xsi:type of the method.\n * @param {SumOfStates} sumOfStates The sum of states.\n */\n/*\nexport class DefinedSumOfStates extends MCRCMethod {\n    sumOfStates: SumOfStates;\n\n    constructor(name: string, sumOfStates: SumOfStates) {\n        super(name);\n        this.sumOfStates = sumOfStates;\n    }\n    toString() {\n        return `DefinedSumOfStates(${super.toString()}, ` +\n            `sumOfStates(${this.sumOfStates.toString()}))`;\n    }\n}\n*/\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends Attributes {\n\n    /**\n     * The id of the reaction. This is also stored in the attributes, but is hee for convenience...\n     */\n    id: string;\n\n    /**\n     * The reactants in the reaction.\n     */\n    reactants: Map<string, Reactant>;\n\n    /**\n     * The products of the reaction.\n     */\n    products: Map<string, Product>;\n\n    /**\n     * The MCRCMethod.\n     */\n    mCRCMethod: MCRCMethod | undefined;\n\n    /**\n     * The transition state.\n     */\n    transitionState: TransitionState | undefined;\n\n    /**\n     * The tunneling.\n     */\n    tunneling: Tunneling | undefined;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} id The id of the reaction.\n     * @param {Map<string, Reactant>} reactants The reactants in the reaction.\n     * @param {Map<string, Product>} products The products of the reaction.\n     * @param {MCRCMethod | undefined} mCRCMethod The MCRCMethod (optional).\n     * @param {TransitionState | undefined} transitionState The transition state (optional).\n     * @param {Tunneling | undefined} tunneling The tunneling (optional).\n     */\n    constructor(attributes: Map<string, string>, id: string,\n        reactants: Map<string, Reactant>, products: Map<string, Product>,\n        mCRCMethod?: MCRCMethod | undefined,\n        transitionState?: TransitionState | undefined,\n        tunneling?: Tunneling | undefined) {\n        super(attributes);\n        this.id = id;\n        this.reactants = reactants;\n        this.products = products;\n        this.mCRCMethod = mCRCMethod;\n        this.transitionState = transitionState;\n        this.tunneling = tunneling;\n    }\n\n    /**\n     * Convert the product to a string.\n     * @returns String representation of the product.\n     */\n    toString(): string {\n        let s: string = super.toString();\n        return super.toString() + `id(${this.id}), ` +\n            `reactants(${mapToString(this.reactants)}), ` +\n            `products(${mapToString(this.products)}), ` +\n            `mCRCMethod(${this.mCRCMethod?.toString()}), ` +\n            `transitionState(${this.transitionState?.toString()}), ` +\n            `tunneling(${this.tunneling?.toString()}))`;\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string {\n        return Array.from(this.reactants.values()).map(reactant => reactant.molecule.id).join(' + ');\n    }\n\n    /**\n     * Get the combined energy of the reactants.\n     * @returns The combined energy of the reactants.\n     */\n    getReactantsEnergy(): number {\n        return Array.from(this.reactants.values()).map(reactant => reactant.molecule.getEnergy()).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string {\n        return Array.from(this.products.values()).map(product => product.molecule.id).join(' + ');\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(): number {\n        return Array.from(this.products.values()).map(product => product.molecule.getEnergy()).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.getReactantsLabel() + ' -> ' + this.getProductsLabel();\n        return label;\n    }\n\n    /**\n     * @param {string} tagName The tag name.\n     * @param {string} pad The pad (Optional).\n     * @param {number} level The level of padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, pad?: string, level?: number): string {\n        // Padding\n        let padding0: string = \"\";\n        let padding1: string = \"\";\n        let padding2: string = \"\";\n        let padding3: string = \"\";\n        if (pad != undefined && level != undefined) {\n            padding0 = pad.repeat(level);\n            padding1 = padding0 + pad;\n            padding2 = padding1 + pad;\n            padding3 = padding2 + pad;\n        }\n        // Reactants\n        let reactants_xml: string = \"\";\n        this.reactants.forEach(reactant => {\n            reactants_xml += reactant.toXML(\"reactant\", pad, padding1);\n        });\n        // Products\n        let products_xml: string = \"\";\n        this.products.forEach(product => {\n            products_xml += product.toXML(\"product\", pad, padding1);\n        });\n        // Tunneling\n        let tunneling_xml: string = \"\";\n        if (this.tunneling != undefined) {\n            tunneling_xml = this.tunneling.toTag(\"me.tunneling\", padding1);\n        }\n        // TransitionState\n        let transitionState_xml: string = \"\";\n        if (this.transitionState != undefined) {\n            transitionState_xml = this.transitionState.toXML(\"transitionState\", pad, padding1);\n        }\n        // MCRCMethod\n        let mCRCMethod_xml: string = \"\";\n        if (this.mCRCMethod != undefined) {\n            if (this.mCRCMethod instanceof MesmerILT) {\n                mCRCMethod_xml = this.mCRCMethod.toXML(\"mCRCMethod\", padding1);\n            } else {\n                mCRCMethod_xml = this.mCRCMethod.toTag(\"mCRCMethod\", padding1);\n            }\n        }\n        return getTag(reactants_xml + products_xml + tunneling_xml + transitionState_xml + mCRCMethod_xml,\n            tagName, this.attributes, undefined, undefined, padding0, true);\n    }\n}","/**\n * Draw a horizontal line and add labels.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {number} strokewidth The width of the line.\n * @param {number} x0 The start x-coordinate of the line.\n * @param {number} y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string, \n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {Integer} x1 The start x-coordinate of the line.\n * @param {Integer} y1 The start y-coordinate of the line.\n * @param {Integer} x2 The end x-coordinate of the line.\n * @param {Integer} y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to write.\n * @param {string} font The font to use.\n * @param {string} colour The colour of the text.\n * @param {number} x The horizontal position of the text.\n * @param {number} y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the height of.\n * @param {string} font The font to use.\n * @returns {number} The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the width of.\n * @param {string} font The font to use.\n * @returns {number} The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}","import {\n    Attributes, NumberWithAttributes\n} from \"./classes.js\";\n\nimport {\n    Molecule\n} from \"./molecule.js\";\n\nimport {\n    ReactionMolecule\n} from \"./reaction.js\";\nimport { getEndTag, getStartTag, getTag } from \"./xml.js\";\n\n\n/**\n * A class for representing a Pressure and Temperature pair.\n */\nexport class PTpair extends Attributes {\n\n    /**\n     * The pressure also stored as a string in the attributes.\n     */\n    P: number;\n\n    /**\n     * The temperature also stored as a string in the attributes.\n     */\n    T: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n        let p: string | undefined = attributes.get(\"P\");\n        if (p) {\n            this.P = parseFloat(p);\n        } else {\n            throw new Error(\"P is undefined\");\n        }\n        let t: string | undefined = attributes.get(\"T\");\n        if (t) {\n            this.T = parseFloat(t);\n        } else {\n            throw new Error(\"T is undefined\");\n        }\n    }\n}\n\n\n/**\n * A class for representing a bath gas reaction molecule.\n */\nexport class BathGas extends ReactionMolecule {\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, molecule);\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions {\n\n    /**\n     * The bath gas.\n     */\n    bathGas: BathGas;\n\n    /**\n     * The Pressure and Temperature pair.\n     */\n    pTs: PTpair[];\n\n    /**\n     * @param {BathGas} bathGas The bath gas.\n     * @param {PTpair} pTs The Pressure and Temperature pairs.\n     */\n    constructor(bathGas: BathGas, pTs: PTpair[]) {\n        this.bathGas = bathGas;\n        this.pTs = pTs;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString() : string {\n        return `Conditions(` +\n            `bathGas(${this.bathGas.toString()}), ` +\n            `pTs(${this.pTs.toString()}))`;\n    }\n\n    /**\n     * @param padding The padding (optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string = \"\";\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = this.bathGas.toXML(\"bathGas\", pad, padding1);\n        this.pTs.forEach((pt) => {\n            s += pt.toTag(\"PTpair\", padding1);\n        });\n        return getTag(s, \"conditions\", undefined, undefined, undefined, padding, true);\n    }\n}","import {\n    NumberWithAttributes\n} from \"./classes\";\nimport { getEndTag, getStartTag, getTag } from \"./xml\";\n\n/**\n * A class for measures of grain size.\n */\nexport class GrainSize extends NumberWithAttributes {\n\n    /**\n     * @param {string} units The units.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n    toString() {\n        return `GrainSize(${super.toString()})`;\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters {\n\n    /**\n     * The grain size.\n     */\n    grainSize: GrainSize;\n    \n    /**\n     * The energy above the top hill.\n     */\n    energyAboveTheTopHill: number;\n\n    /**\n     * @param {GrainSize} grainSize The grain size.\n     * @param {number} energyAboveTheTopHill The energy above the top hill.\n     */\n    constructor(grainSize: GrainSize, energyAboveTheTopHill: number) {\n        this.grainSize = grainSize;\n        this.energyAboveTheTopHill = energyAboveTheTopHill;\n    }\n\n    toString() {\n        return `ModelParameters(` +\n            `grainSize(${this.grainSize.toString()}), ` +\n            `energyAboveTheTopHill(${this.energyAboveTheTopHill.toString()}))`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} pad The pad (Optional).\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding2: string = \"\";\n        if (pad != undefined && padding != undefined) {\n            padding2 = padding + pad;\n        }\n        let s: string = this.grainSize.toXML(\"me:GrainSize\", padding2);\n        s += getTag(this.energyAboveTheTopHill.toString(), \"me:EnergyAboveTheTopHill\", undefined, undefined, undefined, padding2, false);\n        return getTag(s, \"me:modelParameters\", undefined, undefined, undefined, padding, true);\n    }\n}\n","import { \n    NumberWithAttributes\n } from \"./classes\";\nimport { getSelfClosingTag } from \"./html\";\nimport { getTag } from \"./xml\";\n\n/**\n * A class for the diagram energy offset.\n */\nexport class DiagramEnergyOffset extends NumberWithAttributes {\n    \n    /**\n     * @param {Map<string, string>} attributes The attributes (ref refers to a particular reaction). \n     * @param {number} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control {\n    testDOS: boolean | undefined;\n    printSpeciesProfile: boolean | undefined;\n    testMicroRates: boolean | undefined;\n    testRateConstant: boolean | undefined;\n    printGrainDOS: boolean | undefined;\n    printCellDOS: boolean | undefined;\n    printReactionOperatorColumnSums: boolean | undefined;\n    printTunnellingCoefficients: boolean | undefined;\n    printGrainkfE: boolean | undefined;\n    printGrainBoltzmann: boolean | undefined;\n    printGrainkbE: boolean | undefined;\n    eigenvalues: number | undefined;\n    hideInactive: boolean | undefined;\n    diagramEnergyOffset: DiagramEnergyOffset | undefined;\n    constructor(testDOS?: boolean, printSpeciesProfile?: boolean, testMicroRates?: boolean, testRateConstant?:\n        boolean, printGrainDOS?: boolean, printCellDOS?: boolean, printReactionOperatorColumnSums?:\n            boolean, printTunnellingCoefficients?: boolean, printGrainkfE?: boolean, printGrainBoltzmann?: boolean,\n        printGrainkbE?: boolean, eigenvalues?: number, hideInactive?: boolean, diagramEnergyOffset?: DiagramEnergyOffset) {\n        this.testDOS = testDOS;\n        this.printSpeciesProfile = printSpeciesProfile;\n        this.testMicroRates = testMicroRates;\n        this.testRateConstant = testRateConstant;\n        this.printGrainDOS = printGrainDOS;\n        this.printCellDOS = printCellDOS;\n        this.printReactionOperatorColumnSums = printReactionOperatorColumnSums;\n        this.printTunnellingCoefficients = printTunnellingCoefficients;\n        this.printGrainkfE = printGrainkfE;\n        this.printGrainBoltzmann = printGrainBoltzmann;\n        this.printGrainkbE = printGrainkbE;\n        this.eigenvalues = eigenvalues;\n        this.hideInactive = hideInactive;\n        this.diagramEnergyOffset = diagramEnergyOffset;\n    }\n    toString() {\n        return `Control(` +\n            `testDOS(${this.testDOS?.toString()}), ` +\n            `printSpeciesProfile(${this.printSpeciesProfile?.toString()}), ` +\n            `testMicroRates(${this.testMicroRates?.toString()}), ` +\n            `testRateConstant(${this.testRateConstant?.toString()}), ` +\n            `printGrainDOS(${this.printGrainDOS?.toString()}), ` +\n            `printCellDOS(${this.printCellDOS?.toString()}), ` +\n            `printReactionOperatorColumnSums(${this.printReactionOperatorColumnSums?.toString()}), ` +\n            `printTunnellingCoefficients(${this.printTunnellingCoefficients?.toString()}), ` +\n            `printGrainkfE(${this.printGrainkfE?.toString()}), ` +\n            `printGrainBoltzmann(${this.printGrainBoltzmann?.toString()}), ` +\n            `printGrainkbE(${this.printGrainkbE?.toString()}), ` +\n            `eigenvalues(${this.eigenvalues?.toString()}), ` +\n            `hideInactive(${this.hideInactive?.toString()}))`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} pad The pad (Optional).\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad: string, padding?: string): string {\n        let padding1: string = \"\";\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:testDOS\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printSpeciesProfile\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:testMicroRates\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:testRateConstant\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printGrainDOS\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printCellDOS\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printReactionOperatorColumnSums\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printTunnellingCoefficients\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printGrainkfE\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printGrainBoltzmann\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:printGrainkbE\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:eigenvalues\") + \"\\n\";\n        s += padding1 + getSelfClosingTag(null, \"me:hideInactive\");\n        s += this.diagramEnergyOffset?.toXML(\"me:diagramEnergyOffset\", padding1);\n        return getTag(s, \"control\", undefined, undefined, null, padding, true);\n    }\n}","import {\n    get, rescale\n} from './util.js';\n\nimport {\n    getAttribute, getFirstElement, getFirstChildNode, getNodeValue, getTag, getEndTag,\n    getAttributes, toHTML, getSingularElement\n} from './xml.js';\n\nimport {\n    Molecule, Atom, Bond, EnergyTransferModel, DeltaEDown, DOSCMethod, Property\n} from './molecule.js';\n\nimport {\n    Reaction, TransitionState, Reactant, Product, MCRCMethod, MesmerILT,\n    PreExponential, ActivationEnergy, NInfinity, ZhuNakamuraCrossing, Tunneling, TInfinity\n} from './reaction.js';\n\nimport {\n    arrayToString, toNumberArray, isNumeric\n} from './functions.js';\n\nimport {\n    getTD, getTH, getTR, getInput\n} from './html.js';\n\nimport {\n    drawLevel,\n    drawLine,\n    getTextHeight, getTextWidth\n} from './canvas.js';\n\nimport {\n    NumberArrayWithAttributes, NumberWithAttributes\n} from './classes.js';\n\nimport {\n    BathGas, Conditions, PTpair\n} from './conditions.js';\n\nimport {\n    GrainSize, ModelParameters\n} from './modelParameters.js';\n\nimport {\n    Control, DiagramEnergyOffset\n} from './control.js';\n\n// Code for service worker for Progressive Web App (PWA).\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n        navigator.serviceWorker.register('../../../sw.js').then(function (registration) {\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }, function (err) {\n            console.log('ServiceWorker registration failed: ', err);\n        });\n    });\n}\n\n//declare var global: any;\n//const globalScope = (typeof global !== 'undefined') ? global : window;\n\n//if (typeof global === 'undefined') {\n//    (window as any).global = window;\n//}\n\ndeclare global {\n    interface Window {\n        loadXML(): void;\n        saveXML(): void;\n    }\n}\n\n// Expected XML tags strings.\nlet me_title_s: string = 'me:title';\n\n/**\n * For storing me.title.\n */\nlet title: string;\n\n/**\n * For storing the XML root start tag.\n */\nlet mesmerStartTag: string;\n\n/**\n * For storing the XML root end tag.\n */\nlet mesmerEndTag: string;\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */\nlet molecules: Map<string, Molecule> = new Map([]);\n\n/**\n * For storing the maximum molecule energy in a reaction.\n */\nlet maxMoleculeEnergy: number = -Infinity;\n\n/**\n * For storing the minimum molecule energy in a reaction.\n */\nlet minMoleculeEnergy: number = Infinity;\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction> = new Map([]);\n\n/**\n * The header of the XML file.\n */\nconst header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n/**\n * The filename of the mesmer input file loaded.\n */\nlet input_xml_filename: string;\n\n/**\n * The load button.\n */\nlet loadButton: HTMLElement | null;\n\n/**\n * The save button.\n */\nlet saveButton: HTMLElement | null;\n\n/**\n * The XML text element.\n */\nlet me_title: HTMLCollectionOf<Element> | null;\nlet molecules_title: HTMLElement | null;\nlet molecules_table: HTMLElement | null;\nlet reactions_title: HTMLElement | null;\nlet reactions_table: HTMLElement | null;\nlet reactions_diagram_title: HTMLElement | null;\nlet conditions_title: HTMLElement | null;\nlet conditions_table: HTMLElement | null;\nlet modelParameters_title: HTMLElement | null;\nlet modelParameters_table: HTMLElement | null;\nlet xml_title: HTMLElement | null;\nlet xml_text: HTMLElement | null;\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xml: string) {\n    //console.log(\"xml=\" + xml);\n    if (xml_title != null) {\n        xml_title.innerHTML = input_xml_filename;\n    }\n    if (xml_text != null) {\n        xml_text.innerHTML = toHTML(xml);\n    }\n}\n\n/**\n * Parses xml to initilise molecules.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initMolecules(xml: XMLDocument): void {\n    let moleculeList_s: string = 'moleculeList';\n    console.log(moleculeList_s);\n    let xml_moleculeList: Element = getSingularElement(xml, moleculeList_s);\n    // Set molecules_title.\n    molecules_title = document.getElementById(\"molecules_title\");\n    if (molecules_title != null) {\n        molecules_title.innerHTML = \"Molecules\";\n    }\n    // xml_moleculeList should have one or more molecule elements and no other elements.\n    let moleculeListTagNames: Set<string> = new Set();\n    xml_moleculeList.childNodes.forEach(function (node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has(\"molecule\")) {\n        throw new Error(\"Expecting molecule tagName but it is not present!\");\n    }\n    let xml_molecules: HTMLCollectionOf<Element> = xml_moleculeList.getElementsByTagName('molecule');\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    // Process each molecule.\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf like this.\n    for (let i = 0; i < xml_molecules.length; i++) {\n        // Set attributes.\n        let attributes: Map<string, string> = getAttributes(xml_molecules[i]);\n\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_molecules[i].childNodes;\n        cns.forEach(function (node) {\n            moleculeTagNames.add(node.nodeName);\n        });\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n\n        // Set atoms.\n        const atoms: Map<string, Atom> = new Map();\n        // Sometimes there is an individual atom not in an atomArray.\n        //let xml_atomArray = xml_molecules[i].getElementsByTagName(\"atomArray\")[0];\n        //if (xml_atomArray != null) {\n        moleculeTagNames.delete(\"atom\");\n        moleculeTagNames.delete(\"atomArray\");\n\n        let xml_atoms: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(\"atom\");\n        for (let j = 0; j < xml_atoms.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_atoms[j]);\n            let id: string | undefined = attribs.get(\"id\");\n            if (id != undefined) {\n                let atom = new Atom(attribs);\n                //console.log(atom.toString());\n                atoms.set(id, atom);\n            }\n        }\n        //}\n        // Read bondArray.\n        moleculeTagNames.delete(\"bond\");\n        moleculeTagNames.delete(\"bondArray\");\n        const bonds: Map<string, Bond> = new Map();\n        let xml_bonds: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(\"bond\");\n        for (let j = 0; j < xml_bonds.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_bonds[j]);\n            let id: string | undefined = attribs.get(\"atomRefs2\");\n            if (id != undefined) {\n                let bond = new Bond(attribs);\n                //console.log(bond.toString());\n                bonds.set(id, bond);\n            }\n        }\n        // Read propertyList.\n        const properties: Map<string, Property> = new Map();\n        // Sometimes there is a single property not in propertyList!\n        //let xml_propertyList = xml_molecules[i].getElementsByTagName(\"propertyList\")[0];\n        //if (xml_propertyList != null) {\n        //    let xml_properties = xml_propertyList.getElementsByTagName(\"property\");\n\n        moleculeTagNames.delete(\"property\");\n        moleculeTagNames.delete(\"propertyList\");\n        let xml_properties: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(\"property\");\n        for (let j = 0; j < xml_properties.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_properties[j]);\n            let children: HTMLCollectionOf<Element> = xml_properties[j].children;\n            if (children.length != 1) {\n                throw new Error(\"Expecting 1 child but finding \" + children.length);\n            }\n            let nodeAttributes: Map<string, string> = getAttributes(children[0]);\n            let nodeName: string = children[0].nodeName; // Expecting scalar or array\n            let textContent: string | null = children[0].textContent;\n            if (textContent == null) {\n                console.error(\"nodeName\");\n                throw new Error('textContent is null');\n            }\n            textContent = textContent.trim();\n            let dictRef: string | undefined = attribs.get(\"dictRef\");\n            //console.log(\"dictRef=\" + dictRef);\n            if (dictRef == null) {\n                throw new Error('dictRef is null');\n            }\n            //console.log(\"fcnn=\" + fcnn);\n            if (nodeName == \"scalar\") {\n                moleculeTagNames.delete(\"scalar\");\n                let value: number = parseFloat(textContent);\n                properties.set(dictRef, new Property(attribs,\n                    new NumberWithAttributes(nodeAttributes, value)));\n                if (dictRef === \"me:ZPE\") {\n                    minMoleculeEnergy = Math.min(minMoleculeEnergy, value);\n                    maxMoleculeEnergy = Math.max(maxMoleculeEnergy, value);\n                }\n            } else if (nodeName == \"array\") {\n                moleculeTagNames.delete(\"array\");\n                properties.set(dictRef, new Property(attribs,\n                    new NumberArrayWithAttributes(nodeAttributes,\n                        toNumberArray(textContent.split(/\\s+/)), \" \")));\n            } else if (nodeName == \"matrix\") {\n            } else {\n                throw new Error(\"Unexpected nodeName: \" + nodeName);\n            }\n        }\n\n        let els: HTMLCollectionOf<Element> | null;\n\n        // Read energyTransferModel\n        moleculeTagNames.delete(\"me:energyTransferModel\");\n        let energyTransferModel: EnergyTransferModel | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(\"me:energyTransferModel\");\n        if (els != null) {\n            if (els.length > 0) {\n                if (els.length != 1) {\n                    throw new Error(\"energyTransferModel length=\" + els.length);\n                }\n                let xml_deltaEDown = els[0].getElementsByTagName(\"me:deltaEDown\");\n                if (xml_deltaEDown != null) {\n                    if (xml_deltaEDown.length != 1) {\n                        throw new Error(\"deltaEDown length=\" + xml_deltaEDown.length);\n                    }\n                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_deltaEDown[0])));\n                    let deltaEDown: DeltaEDown = new DeltaEDown(getAttributes(xml_deltaEDown[0]), value);\n                    energyTransferModel = new EnergyTransferModel(getAttributes(els[0]), deltaEDown);\n                }\n            }\n        }\n\n        // Read DOSCMethod\n        moleculeTagNames.delete(\"me:DOSCMethod\");\n        let dOSCMethod: DOSCMethod | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(\"me:DOSCMethod\");\n        if (els != null) {\n            let el: Element | null = els[0];\n            if (el != null) {\n                if (el != null) {\n                    let type = el.getAttribute(\"xsi:type\");\n                    if (type != null) {\n                        dOSCMethod = new DOSCMethod(type);\n                    }\n                }\n            }\n        }\n\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.error(\"Remaining moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.error(x));\n            throw new Error(\"Unexpected tags in molecule.\");\n        }\n\n        let molecule = new Molecule(attributes, atoms, bonds, properties, energyTransferModel, dOSCMethod);\n        //console.log(molecule.toString());\n        molecules.set(molecule.id, molecule);\n    }\n    // Add event listeners to molecules table.\n    molecules.forEach(function (molecule, id) {\n        let energyKey = id + \"_energy\";\n        let inputElement = document.getElementById(energyKey) as HTMLInputElement;\n        if (inputElement) {\n            inputElement.addEventListener('change', (event) => {\n                // The input is set up to call the function setEnergy(HTMLInputElement),\n                // so the following commented code is not used. As the input was setup \n                // as a number type. The any non numbers were It seems that there are two \n                // ways to get and store the value of the input element.\n                // Both ways have been kept for now as I don't know which way is better!\n                let eventTarget = event.target as HTMLInputElement;\n                let inputValue = eventTarget.value;\n                if (isNumeric(inputValue)) {\n                    molecule.setEnergy(parseFloat(inputValue));\n                    console.log(\"Set energy of \" + id + \" to \" + inputValue + \" kJ/mol\");\n                } else {\n                    alert(\"Energy input for \" + id + \" is not a number\");\n                    let inputElement = document.getElementById(energyKey) as HTMLInputElement;\n                    inputElement.value = molecule.getEnergy().toString();\n                    console.log(\"inputValue=\" + inputValue);\n                    console.log(\"Type of inputValue: \" + typeof inputValue);\n                }\n            });\n        }\n    });\n}\n\nlet inputElement: HTMLInputElement;\n\nfunction reload() {\n    inputElement = document.createElement('input');\n    inputElement.type = 'file';\n    inputElement.onchange = function () {\n        if (inputElement.files) {\n            for (let i = 0; i < inputElement.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            }\n            let file: File | null = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            input_xml_filename = file.name;\n            if (xml_text != null) {\n                let reader = new FileReader();\n                let chunkSize = 1024 * 1024; // 1MB\n                let start = 0;\n                let contents = '';\n                reader.onload = function (e) {\n                    if (!e.target) {\n                        throw new Error('Event target is null');\n                    }\n                    contents += (e.target as FileReader).result as string;\n                    if (file != null) {\n                        if (start < file.size) {\n                            // Read the next chunk\n                            let blob = file.slice(start, start + chunkSize);\n                            reader.readAsText(blob);\n                            start += chunkSize;\n                        } else {\n                            // All chunks have been read\n                            contents = contents.trim();\n                            displayXML(contents);\n                            let parser = new DOMParser();\n                            let xml = parser.parseFromString(contents, \"text/xml\");\n                            parse(xml);\n\n                            // Send XML to the server\n                            fetch('http://localhost:1234/', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'text/xml',\n                                },\n                                body: contents,\n                            })\n                                .then(response => {\n                                    if (!response.ok) {\n                                        throw new Error(`HTTP error! status: ${response.status}`);\n                                    }\n                                    return response.text();\n                                })\n                                .then(data => {\n                                    console.log('Server response:', data);\n                                })\n                                .catch(error => {\n                                    console.error('There was a problem with the fetch operation:', error);\n                                });\n                        }\n                    }\n                };\n                // Read the first chunk\n                let blob = file.slice(start, start + chunkSize);\n                reader.readAsText(blob);\n                start += chunkSize;\n            }\n        }\n    };\n    inputElement.click();\n    // Add event listener to load button.\n    loadButton = document.getElementById('load_button');\n    if (loadButton != null) {\n        loadButton.addEventListener('click', reload);\n    }\n\n    // Ensure save button is displayed.\n    saveButton = document.getElementById('saveButton');\n    if (saveButton != null) {\n        saveButton.style.display = 'inline';\n    }\n}\n\n/**\n * Once the DOM is loaded, set up the elements.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n\n    // Initialise elements\n    xml_title = document.getElementById(\"xml_title\");\n    xml_text = document.getElementById(\"xml_text\");\n\n\n    window.loadXML = function () {\n        reload();\n    }\n});\n\n/**\n * Set the title.\n * @param {XMLDocument} xml The XML document.\n */\nfunction setTitle(xml: XMLDocument) {\n    me_title = xml.getElementsByTagName(me_title_s);\n    if (me_title == null) {\n        throw new Error(me_title_s + ' not found');\n    } else {\n        if (me_title.length != 1) {\n            throw new Error('Multiple ' + me_title_s + ' elements found');\n        } else {\n            title = me_title[0].childNodes[0].nodeValue as string;\n            title = title.trim();\n            console.log(\"Title=\" + title);\n            let e: HTMLElement | null = document.getElementById(\"title\");\n            if (e != null) {\n                e.innerHTML = title;\n            }\n        }\n    }\n}\n\n/**\n * Parse the XML.\n * @param {XMLDocument} xml \n */\nfunction parse(xml: XMLDocument) {\n\n    /**\n     * Set mesmer_xml start tag.\n     */\n    mesmerStartTag = \"\\n\";\n    let documentElement: HTMLElement = xml.documentElement;\n    if (documentElement == null) {\n        throw new Error(\"Document element not found\");\n    } else {\n        let tagName: string = documentElement.tagName;\n        mesmerStartTag += \"<\" + tagName;\n        console.log(tagName);\n        mesmerEndTag = getEndTag(tagName, \"\", true);\n        let first: boolean = true;\n        let pad = \" \".repeat(tagName.length + 2);\n        let names: string[] = documentElement.getAttributeNames();\n        names.forEach(function (name) {\n            let attribute = documentElement.getAttribute(name);\n            let na = `${name}=\"${attribute}\"`;\n            if (first) {\n                first = false;\n                mesmerStartTag += \" \" + na;\n            } else {\n                mesmerStartTag += \"\\n\" + pad + na;\n            }\n        });\n        mesmerStartTag += \">\";\n        //console.log(mesmerStartTag);\n    }\n\n    /**\n     *  Set title.\n     */\n    setTitle(xml);\n\n    /**\n     * Generate molecules table.\n     */\n    initMolecules(xml);\n    displayMoleculesTable();\n\n    /**\n     * Generate reactions table.\n     */\n    initReactions(xml);\n    displayReactionsTable();\n    displayReactionsDiagram();\n\n    /**\n     * Generate conditions table.\n     */\n    initConditions(xml);\n    displayConditions();\n\n    /**\n     * Generate parameters table.\n     */\n    initModelParameters(xml);\n    displayModelParameters();\n\n    /**\n     * Generate control table.\n     */\n    initControl(xml);\n    displayControl();\n}\n\nlet conditions: Conditions;\n\n/**\n * Parse xml to initialise conditions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initConditions(xml: XMLDocument): void {\n    let me_conditions_s: string = 'me:conditions';\n    console.log(me_conditions_s);\n    let xml_conditions: Element = getSingularElement(xml, me_conditions_s);\n    // Set conditions_title.\n    conditions_title = document.getElementById(\"conditions_title\");\n    if (conditions_title != null) {\n        conditions_title.innerHTML = \"Conditions\";\n    }\n    // BathGas\n    let xml_bathGas: Element = getSingularElement(xml_conditions, 'me:bathGas');\n    let attributes: Map<string, string> = getAttributes(xml_bathGas);\n    let bathGas: BathGas = new BathGas(attributes, get(molecules, xml_bathGas.childNodes[0].nodeValue));\n    // PTs\n    let xml_PTs: Element = getSingularElement(xml_conditions, 'me:PTs');\n    let xml_PTPairs: HTMLCollectionOf<Element> = xml_PTs.getElementsByTagName('me:PTpair');\n    // Process each PTpair.\n    let PTs: PTpair[] = [];\n    for (let i = 0; i < xml_PTPairs.length; i++) {\n        PTs.push(new PTpair(getAttributes(xml_PTPairs[i])));\n    }\n    conditions = new Conditions(bathGas, PTs);\n}\n\nlet modelParameters: ModelParameters;\n\n/**\n * Parses xml to initialise modelParameters.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initModelParameters(xml: XMLDocument): void {\n    let me_modelParameters_s: string = 'me:modelParameters';\n    console.log(me_modelParameters_s);\n    let xml_modelParameters: Element = getSingularElement(xml, me_modelParameters_s);\n    // Set modelParameters_title.\n    modelParameters_title = document.getElementById(\"modelParameters_title\");\n    if (modelParameters_title != null) {\n        modelParameters_title.innerHTML = \"Model Parameters\";\n    }\n    // GrainSize\n    let xml_grainSize: Element = getSingularElement(xml_modelParameters, 'me:grainSize');\n    let attributes: Map<string, string> = getAttributes(xml_grainSize);\n    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_grainSize)));\n    let grainSize: GrainSize = new GrainSize(attributes, value);\n    // EnergyAboveTheTopHill\n    let xml_energyAboveTheTopHill: Element = getSingularElement(xml_modelParameters, 'me:energyAboveTheTopHill');\n    let energyAboveTheTopHill: number = parseFloat(getNodeValue(getFirstChildNode(xml_energyAboveTheTopHill)));\n    modelParameters = new ModelParameters(grainSize, energyAboveTheTopHill);\n}\n\nlet control: Control;\n\n/**\n * Parses xml to initialise control.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initControl(xml: XMLDocument): void {\n    let me_control_s: string = 'me:control';\n    console.log(me_control_s);\n    let xml_control: Element = getSingularElement(xml, me_control_s);\n    // Set control_title.\n    let control_title = document.getElementById(\"control_title\");\n    if (control_title != null) {\n        control_title.innerHTML = \"Control\";\n    }\n    // me:testDOS\n    let xml_testDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:testDOS');\n    let testDOS: boolean | undefined;\n    if (xml_testDOS.length > 0) {\n        testDOS = true;\n    }\n    // me:printSpeciesProfile\n    let xml_printSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printSpeciesProfile');\n    let printSpeciesProfile: boolean | undefined;\n    if (xml_printSpeciesProfile.length > 0) {\n        printSpeciesProfile = true;\n    }\n    // me:testMicroRates\n    let xml_testMicroRates: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:testMicroRates');\n    let testMicroRates: boolean | undefined;\n    if (xml_testMicroRates.length > 0) {\n        testMicroRates = true;\n    }\n    // me:testRateConstant\n    let xml_testRateConstant: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:testRateConstant');\n    let testRateConstant: boolean | undefined;\n    if (xml_testRateConstant.length > 0) {\n        testRateConstant = true;\n    }\n    // me:printGrainDOS\n    let xml_printGrainDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printGrainDOS');\n    let printGrainDOS: boolean | undefined;\n    if (xml_printGrainDOS.length > 0) {\n        printGrainDOS = true;\n    }\n    // me:printCellDOS\n    let xml_printCellDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printCellDOS');\n    let printCellDOS: boolean | undefined;\n    if (xml_printCellDOS.length > 0) {\n        printCellDOS = true;\n    }\n    // me:printReactionOperatorColumnSums\n    let xml_printReactionOperatorColumnSums: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printReactionOperatorColumnSums');\n    let printReactionOperatorColumnSums: boolean | undefined;\n    if (xml_printReactionOperatorColumnSums.length > 0) {\n        printReactionOperatorColumnSums = true;\n    }\n    // me:printTunnellingCoefficients\n    let xml_printTunnellingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printTunnellingCoefficients');\n    let printTunnellingCoefficients: boolean | undefined;\n    if (xml_printTunnellingCoefficients.length > 0) {\n        printTunnellingCoefficients = true;\n    }\n    // me:printGrainkfE\n    let xml_printGrainkfE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printGrainkfE');\n    let printGrainkfE: boolean | undefined;\n    if (xml_printGrainkfE.length > 0) {\n        printGrainkfE = true;\n    }\n    // me:printGrainBoltzmann\n    let xml_printGrainBoltzmann: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printGrainBoltzmann');\n    let printGrainBoltzmann: boolean | undefined;\n    if (xml_printGrainBoltzmann.length > 0) {\n        printGrainBoltzmann = true;\n    }\n    // me:printGrainkbE\n    let xml_printGrainkbE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:printGrainkbE');\n    let printGrainkbE: boolean | undefined;\n    if (xml_printGrainkbE.length > 0) {\n        printGrainkbE = true;\n    }\n    // me:eigenvalues\n    let xml_eigenvalues: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:eigenvalues');\n    let eigenvalues: number | undefined;\n    if (xml_eigenvalues.length > 0) {\n        eigenvalues = parseFloat(getNodeValue(getFirstChildNode(xml_eigenvalues[0])));\n    }\n    // me:hideInactive\n    let xml_hideInactive: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:hideInactive');\n    let hideInactive: boolean | undefined;\n    if (xml_hideInactive.length > 0) {\n        hideInactive = true;\n    }\n    // me:diagramEnergyOffset\n    let xml_diagramEnergyOffset: HTMLCollectionOf<Element> = xml_control.getElementsByTagName('me:diagramEnergyOffset');\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined;\n    if (xml_diagramEnergyOffset.length > 0) {\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffset = new DiagramEnergyOffset(getAttributes(xml_diagramEnergyOffset[0]), value);\n    }\n\n    control = new Control(testDOS, printSpeciesProfile, testMicroRates, testRateConstant,\n        printGrainDOS, printCellDOS, printReactionOperatorColumnSums, printTunnellingCoefficients, printGrainkfE,\n        printGrainBoltzmann, printGrainkbE, eigenvalues, hideInactive, diagramEnergyOffset);\n}\n\n/**\n * Parses xml to initialise reactions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initReactions(xml: XMLDocument): void {\n    let reactionList_s: string = 'reactionList';\n    console.log(reactionList_s);\n    let xml_reactionList: Element = getSingularElement(xml, reactionList_s);\n    let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName('reaction');\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    // Process each reaction.\n    if (xml_reactions_length == 0) {\n        //return;\n        throw new Error(\"No reactions: There should be at least 1!\");\n    }\n    // Set reactions_title.\n    reactions_title = document.getElementById(\"reactions_title\");\n    if (reactions_title != null) {\n        reactions_title.innerHTML = \"Reactions\";\n    }\n    for (let i = 0; i < xml_reactions_length; i++) {\n        let attributes: Map<string, string> = getAttributes(xml_reactions[i]);\n        let reactionID = attributes.get(\"id\");\n        if (reactionID == null) {\n            throw new Error(\"reactionID is null\");\n        }\n        if (reactionID != null) {\n            console.log(\"id=\" + reactionID);\n            // Load reactants.\n            let reactants: Map<string, Reactant> = new Map([]);\n            let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName('reactant');\n            //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n            for (let j = 0; j < xml_reactants.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_reactants[j], 'molecule');\n                let moleculeID: string = getAttribute(xml_molecule, \"ref\");\n                reactants.set(moleculeID, new Reactant(getAttributes(xml_molecule),\n                    get(molecules, moleculeID)));\n            }\n            // Load products.\n            let products: Map<string, Product> = new Map([]);\n            let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName('product');\n            //console.log(\"xml_products.length=\" + xml_products.length);\n            for (let j = 0; j < xml_products.length; j++) {\n                let xml_molecule = getFirstElement(xml_products[j], 'molecule');\n                let moleculeID: string = getAttribute(xml_molecule, \"ref\");\n                products.set(moleculeID,\n                    new Product(getAttributes(xml_molecule),\n                        get(molecules, moleculeID)));\n            }\n            // Load MCRCMethod.\n            //console.log(\"Load MCRCMethod...\");\n            let mCRCMethod: MCRCMethod | undefined;\n            let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName('me:MCRCMethod');\n            //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n            //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n            if (xml_MCRCMethod.length > 0) {\n                let attributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                let name: string | undefined = attributes.get(\"name\");\n                if (name == null) {\n                    let type = attributes.get(\"xsi:type\");\n                    if (type != null) {\n                        if (type === \"me:MesmerILT\") {\n                            let preExponential: PreExponential | undefined;\n                            let xml_preExponential: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:preExponential\");\n                            if (xml_preExponential != null) {\n                                if (xml_preExponential[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_preExponential[0])));\n                                    preExponential = new PreExponential(getAttributes(xml_preExponential[0]), value);\n                                }\n                            }\n                            let activationEnergy: ActivationEnergy | undefined;\n                            let xml_activationEnergy: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:activationEnergy\");\n                            if (xml_activationEnergy != null) {\n                                if (xml_activationEnergy[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_activationEnergy[0])));\n                                    activationEnergy = new ActivationEnergy(getAttributes(xml_activationEnergy[0]), value);\n                                }\n                            }\n                            let tInfinity: TInfinity | undefined;\n                            let xml_tInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:TInfinity\");\n                            if (xml_tInfinity != null) {\n                                if (xml_tInfinity[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_tInfinity[0])));\n                                    tInfinity = new NInfinity(getAttributes(xml_tInfinity[0]), value);\n                                }\n                            }\n                            let nInfinity: NInfinity | undefined;\n                            let xml_nInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:nInfinity\");\n                            if (xml_nInfinity != null) {\n                                if (xml_nInfinity[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_nInfinity[0])));\n                                    nInfinity = new NInfinity(getAttributes(xml_nInfinity[0]), value);\n                                }\n                            }\n                            mCRCMethod = new MesmerILT(attributes, preExponential, activationEnergy, tInfinity, nInfinity);\n                        }\n                    }\n                } else {\n                    mCRCMethod = new MCRCMethod(attributes, name);\n                }\n            }\n            // Load transition state.\n            //console.log(\"Load  transition state...\");\n            let xml_transitionState: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(\n                'me:transitionState');\n            let transitionState: TransitionState | undefined;\n            if (xml_transitionState.length > 0) {\n                let xml_molecule: Element = xml_transitionState[0].getElementsByTagName('molecule')[0];\n                let moleculeID: string | null = xml_molecule.getAttribute(\"ref\");\n                transitionState = new TransitionState(getAttributes(xml_molecule), get(molecules, moleculeID));\n                //console.log(\"transitionState moleculeID=\" + transitionState.molecule.getID());\n                //console.log(\"transitionState role=\" + transitionState.attributes.get(\"role\"));\n            }\n            // Load tunneling.\n            let xml_tunneling = xml_reactions[i].getElementsByTagName('me:tunneling');\n            let tunneling: Tunneling | undefined;\n            if (xml_tunneling.length > 0) {\n                tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n            }\n            let reaction = new Reaction(attributes, reactionID, reactants, products,\n                mCRCMethod, transitionState, tunneling);\n            reactions.set(reactionID, reaction);\n            //console.log(\"reaction=\" + reaction);\n        }\n    }\n}\n\n/**\n * Create a diagram.\n * @param {Map<string, Molecule>} molecules The molecules.\n * @param {Map<string, Reaction>} reactions The reactions.\n * @param {boolean} dark True for dark mode.\n * @returns {HTMLCanvasElement} The diagram.\n * @param {string} font The font to use.\n * @param {number} lw The line width of reactants, transition states and products.\n * @param {string} lwc The line width color to use.\n */\nfunction drawReactionDiagram(canvas: HTMLCanvasElement, molecules: Map<string, Molecule>,\n    reactions: Map<string, Reaction>, dark: boolean, font: string, lw: number, lwc: number): void {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    //ctx.fillStyle = background;\n\n    // Get text height for font size.\n    let th = getTextHeight(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants: Set<string> = new Set();\n    let products: Set<string> = new Set();\n    let intProducts: Set<string> = new Set();\n    let transitionStates: Set<string> = new Set();\n    let orders: Map<string, number> = new Map();\n    let energies: Map<string, number> = new Map();\n    let i: number = 0;\n    let energyMin: number = Number.MAX_VALUE;\n    let energyMax: number = Number.MIN_VALUE;\n    reactions.forEach(function (reaction, id) {\n        // Get TransitionState if there is one.\n        let transitionState: TransitionState | undefined = reaction.transitionState;\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string = reaction.getReactantsLabel();\n        reactants.add(reactantsLabel);\n        if (products.has(reactantsLabel)) {\n            intProducts.add(reactantsLabel);\n        }\n        let energy: number = reaction.getReactantsEnergy();\n        energyMin = Math.min(energyMin, energy);\n        energyMax = Math.max(energyMax, energy);\n        energies.set(reactantsLabel, energy);\n        let productsLabel: string = reaction.getProductsLabel();\n        products.add(productsLabel);\n        energy = reaction.getProductsEnergy();\n        energyMin = Math.min(energyMin, energy);\n        energyMax = Math.max(energyMax, energy);\n        energies.set(productsLabel, energy);\n        if (!orders.has(reactantsLabel)) {\n            orders.set(reactantsLabel, i);\n            i++;\n        }\n        if (orders.has(productsLabel)) {\n            i--;\n            let j: number = get(orders, productsLabel);\n            // Move product to end and shift everything back.\n            orders.forEach(function (value, key) {\n                if (value > j) {\n                    orders.set(key, value - 1);\n                }\n            });\n            // Insert transition state.\n            if (transitionState != undefined) {\n                let tsn: string = transitionState.getRef();\n                transitionStates.add(tsn);\n                orders.set(tsn, i);\n                energy = transitionState.molecule.getEnergy();\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(tsn, energy);\n                i++;\n            }\n            orders.set(productsLabel, i);\n            i++\n        } else {\n            if (transitionState != undefined) {\n                let tsn: string = transitionState.getRef();\n                transitionStates.add(tsn);\n                orders.set(tsn, i);\n                energy = transitionState.molecule.getEnergy();\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(tsn, energy);\n                i++;\n            }\n            orders.set(productsLabel, i);\n            i++;\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange: number = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n\n    // Create a lookup from order to label.\n    let reorders: string[] = [];\n    orders.forEach(function (value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0: number = 0;\n    let y0: number;\n    let x1: number;\n    let y1: number;\n    let xmax: number = 0;\n    let tw: number;\n    let textSpacing: number = 5; // Spacing between end of line and start of text.\n    let stepSpacing: number = 10; // Spacing between steps.\n    let reactantsInXY: Map<string, number[]> = new Map();\n    let reactantsOutXY: Map<string, number[]> = new Map();\n    let productsInXY: Map<string, number[]> = new Map();\n    let productsOutXY: Map<string, number[]> = new Map();\n    let transitionStatesInXY: Map<string, number[]> = new Map();\n    let transitionStatesOutXY: Map<string, number[]> = new Map();\n    reorders.forEach(function (value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines.)\n        // The code is left here commented out for reference.\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [x0, y0]);\n        reactantsOutXY.set(value, [x1, y1]);\n        if (products.has(value)) {\n            productsInXY.set(value, [x0, y0]);\n            productsOutXY.set(value, [x1, y1]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [x0, y0]);\n            transitionStatesOutXY.set(value, [x1, y1]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + (4 * th) + (2 * lw);\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n\n    let originalCanvasHeight = canvas.height;\n\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n\n\n    // Go through reactions and draw connecting lines.\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let transitionState: TransitionState | undefined = reaction.transitionState;\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string = reaction.getReactantsLabel();\n        let productsLabel: string = reaction.getProductsLabel();\n        let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n        let productInXY: number[] = get(productsInXY, productsLabel);\n        if (transitionState != undefined) {\n            let transitionStateLabel: string = transitionState.getRef();\n            let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                transitionStateInXY[1]);\n            let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n            drawLine(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                productInXY[0], productInXY[1]);\n        } else {\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1],\n                productInXY[0], productInXY[1]);\n        }\n    });\n\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(reactantsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(reactantsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(productsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(productsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        if (intProducts.has(value)) {\n            drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        } else {\n            drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n        }\n    });\n    transitionStates.forEach(function (value) {\n        let v: any;\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(transitionStatesInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(transitionStatesOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\n\n/**\n * Display molecules table.\n */\nfunction displayMoleculesTable(): void {\n    if (molecules.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let moleculesTable = getTH([\n        \"Name\",\n        \"Energy<br>kJ/mol\",\n        \"Rotation constants<br>cm<sup>-1</sup>\",\n        \"Vibration frequencies<br>cm<sup>-1</sup>\"]);\n    molecules.forEach(function (molecule, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"molecule=\" + molecule);\n        let energyNumber: number = molecule.getEnergy();\n        let energy: string;\n        if (energyNumber == null) {\n            energy = \"\";\n        } else {\n            energy = energyNumber.toString();\n        }\n        //console.log(\"energy=\" + energy);\n        let rotationConstants: string = \"\";\n        let rotConsts: number[] | undefined = molecule.getRotationConstants();\n        if (rotConsts != undefined) {\n            rotationConstants = arrayToString(rotConsts, \" \");\n        }\n        let vibrationFrequencies: string = \"\";\n        let vibFreqs: number[] | undefined = molecule.getVibrationFrequencies();\n        if (vibFreqs != undefined) {\n            vibrationFrequencies = arrayToString(vibFreqs, \" \");\n        }\n        moleculesTable += getTR(getTD(id)\n            + getTD(getInput(\"number\", id + \"_energy\", \"setEnergy(this)\", energy))\n            + getTD(rotationConstants, true)\n            + getTD(vibrationFrequencies, true));\n    });\n    molecules_table = document.getElementById(\"molecules_table\");\n    if (molecules_table !== null) {\n        molecules_table.innerHTML = moleculesTable;\n    }\n}\n\n/**\n * Display reactions table.\n */\nfunction displayReactionsTable(): void {\n    if (reactions.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let reactionsTable = getTH([\"ID\", \"Reactants\", \"Products\", \"Transition State\",\n        \"PreExponential\", \"Activation Energy\", \"TInfinity\", \"NInfinity\"]);\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        let reactants: string = arrayToString(Array.from(reaction.reactants.keys()), \" \");\n        let products: string = arrayToString(Array.from(reaction.products.keys()), \" \");\n        let transitionState: string = \"\";\n        let preExponential: string = \"\";\n        let activationEnergy: string = \"\";\n        let tInfinity: string = \"\";\n        let nInfinity: string = \"\";\n        if (reaction.transitionState != undefined) {\n            let name: string | undefined = reaction.transitionState.attributes.get(\"name\");\n            if (name != null) {\n                transitionState = name;\n            }\n        }\n        if (reaction.mCRCMethod != undefined) {\n            if (reaction.mCRCMethod instanceof MesmerILT) {\n                if (reaction.mCRCMethod.preExponential != null) {\n                    preExponential = reaction.mCRCMethod.preExponential.value.toString() + \" \"\n                        + reaction.mCRCMethod.preExponential.attributes.get(\"units\");\n                }\n                if (reaction.mCRCMethod.activationEnergy != null) {\n                    activationEnergy = reaction.mCRCMethod.activationEnergy.value.toString() + \" \"\n                        + reaction.mCRCMethod.activationEnergy.attributes.get(\"units\");\n                }\n                if (reaction.mCRCMethod.tInfinity != null) {\n                    tInfinity = reaction.mCRCMethod.tInfinity.toString();\n                }\n                if (reaction.mCRCMethod.nInfinity != null) {\n                    nInfinity = reaction.mCRCMethod.nInfinity.value.toString();\n                }\n            } else {\n                if (reaction.mCRCMethod.attributes.get(\"name\") == \"RRKM\") {\n                } else {\n                    throw new Error(\"Unexpected mCRCMethod: \" + reaction.mCRCMethod);\n                }\n            }\n        }\n        reactionsTable += getTR(getTD(id) + getTD(reactants) + getTD(products) + getTD(transitionState)\n            + getTD(preExponential, true) + getTD(activationEnergy, true) + getTD(tInfinity, true)\n            + getTD(nInfinity, true));\n        reactions_table = document.getElementById(\"reactions_table\");\n        if (reactions_table !== null) {\n            reactions_table.innerHTML = reactionsTable;\n        }\n    });\n}\n\n/**\n * Display reactions diagram.\n */\nfunction displayReactionsDiagram(): void {\n    if (reactions.size > 1) {\n        // Set reactions_diagram_title.\n        reactions_diagram_title = document.getElementById(\"reactions_diagram_title\");\n        if (reactions_diagram_title != null) {\n            reactions_diagram_title.innerHTML = \"Diagram\";\n        }\n        // Display the diagram.\n        let canvas: HTMLCanvasElement | null = document.getElementById(\"reactions_diagram\") as HTMLCanvasElement;\n        let font: string = \"14px Arial\";\n        let dark: boolean = true;\n        let lw: number = 4;\n        let lwc: number = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            drawReactionDiagram(canvas, molecules, reactions, dark, font, lw, lwc);\n        }\n    }\n}\n\n/**\n * Display conditions.\n */\nfunction displayConditions(): void {\n    let bathGas_element: HTMLElement | null = document.getElementById(\"bathGas\");\n    if (bathGas_element != null) {\n        bathGas_element.innerHTML = \"Bath Gas \" + conditions.bathGas.molecule.getID();\n    }\n    let PTs_element: HTMLElement | null = document.getElementById(\"PT_table\");\n    let table: string = getTH([\"P\", \"T\"]);\n    if (PTs_element != null) {\n        conditions.pTs.forEach(function (pTpair) {\n            table += getTR(getTD(pTpair.P.toString()) + getTD(pTpair.T.toString()));\n        });\n        PTs_element.innerHTML = table;\n    }\n}\n\n/**\n * Display modelParameters.\n */\nfunction displayModelParameters(): void {\n    let modelParameters_element: HTMLElement | null = document.getElementById(\"modelParameters_table\");\n    let table: string = getTH([\"Parameter\", \"Value\"]);\n    table += getTR(getTD(\"Grain Size\") + getTD(modelParameters.grainSize.value.toString()));\n    table += getTR(getTD(\"Energy Above The Top Hill\") + getTD(modelParameters.energyAboveTheTopHill.toString()));\n\n    if (modelParameters_element != null) {\n        modelParameters_element.innerHTML = table;\n    }\n}\n\n/**\n * Display control.\n */\nfunction displayControl(): void {\n    let control_table_element: HTMLElement | null = document.getElementById(\"control_table\");\n    let table: string = getTH([\"Control\", \"Value\"]);\n    if (control.testDOS != undefined) {\n        table += getTR(getTD(\"me.testDOS\") + getTD(\"\"));\n    }\n    if (control.printSpeciesProfile != undefined) {\n        table += getTR(getTD(\"me.printSpeciesProfile\") + getTD(\"\"));\n    }\n    if (control.testMicroRates != undefined) {\n        table += getTR(getTD(\"me.testMicroRates\") + getTD(\"\"));\n    }\n    if (control.testRateConstant != undefined) {\n        table += getTR(getTD(\"me.testRateConstant\") + getTD(\"\"));\n    }\n    if (control.printGrainDOS != undefined) {\n        table += getTR(getTD(\"me.printGrainDOS\") + getTD(\"\"));\n    }\n    if (control.printCellDOS != undefined) {\n        table += getTR(getTD(\"me.printCellDOS\") + getTD(\"\"));\n    }\n    if (control.printReactionOperatorColumnSums != undefined) {\n        table += getTR(getTD(\"me.printReactionOperatorColumnSums\") + getTD(\"\"));\n    }\n    if (control.printTunnellingCoefficients != undefined) {\n        table += getTR(getTD(\"me.printTunnellingCoefficients\") + getTD(\"\"));\n    }\n    if (control.printGrainkfE != undefined) {\n        table += getTR(getTD(\"me.printGrainkfE\") + getTD(\"\"));\n    }\n    if (control.printGrainBoltzmann != undefined) {\n        table += getTR(getTD(\"me.printGrainBoltzmann\") + getTD(\"\"));\n    }\n    if (control.printGrainkbE != undefined) {\n        table += getTR(getTD(\"me.printGrainkbE\") + getTD(\"\"));\n    }\n    if (control.eigenvalues != undefined) {\n        table += getTR(getTD(\"me.eigenvalues\") + getTD(control.eigenvalues.toString()));\n    }\n    if (control.hideInactive != undefined) {\n        table += getTR(getTD(\"me.hideInactive\") + getTD(\"\"));\n    }\n    if (control.diagramEnergyOffset != undefined) {\n        table += getTR(getTD(\"me.diagramEnergyOffset\") + getTD(control.diagramEnergyOffset.value.toString()));\n    }\n    if (control_table_element != null) {\n        control_table_element.innerHTML = table;\n    }\n}\n\n/**\n * Set the energy of a molecule when the energy input value is changed.\n * @param input The input element. \n */\nexport function setEnergy(input: HTMLInputElement): void {\n    let id_energy: string = input.id;\n    let moleculeID: string = id_energy.split(\"_\")[0];\n    let molecule: Molecule | undefined = molecules.get(moleculeID);\n    if (molecule != undefined) {\n        let inputValue: number = parseFloat(input.value);\n        if (!isNaN(inputValue)) {\n            molecule.setEnergy(inputValue);\n            console.log(\"Energy of \" + moleculeID + \" set to \" + inputValue);\n        } else {\n            alert(\"Energy input for \" + moleculeID + \" is not a number\");\n            let inputElement = document.getElementById(id_energy) as HTMLInputElement;\n            inputElement.value = molecule.getEnergy().toString();\n        }\n        //console.log(\"molecule=\" + molecule);\n    }\n}\n\n(window as any).setEnergy = setEnergy;\n\n/**\n * Save to XML file.\n */\nwindow.saveXML = function () {\n    console.log(\"saveXML\");\n\n    const pad: string = \"  \";\n    let level: number;\n    const padding2: string = pad.repeat(2);\n\n    // Create me.title.\n    let title_xml = \"\\n\" + pad + getTag(title, \"me:title\");\n\n    // Create moleculeList.\n    level = 2;\n    let moleculeList: string = \"\";\n    molecules.forEach(function (molecule, id) {\n        moleculeList += molecule.toXML(\"molecule\", pad, level);\n    });\n    moleculeList = getTag(moleculeList, \"moleculeList\", undefined, undefined, undefined, pad, true);\n\n    // Create reactionList.\n    level = 2;\n    let reactionList: string = \"\";\n    reactions.forEach(function (reaction, id) {\n        reactionList += reaction.toXML(\"reaction\", pad, level);\n    });\n    reactionList = getTag(reactionList, \"reactionList\", undefined, undefined, undefined, pad, true);\n\n    // Create me.Conditions\n    let xml_conditions: string = conditions.toXML(pad, pad);\n\n    // Create modelParameters\n    let xml_modelParameters: string = modelParameters.toXML(pad, pad);\n\n    // create me.control\n    let xml_control: string = control.toXML(pad, pad);\n\n    // Create a new Blob object from the data\n    let blob = new Blob([header, mesmerStartTag, title_xml, moleculeList, reactionList,\n        xml_conditions, xml_modelParameters, xml_control, mesmerEndTag],\n        { type: \"text/plain\" });\n\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    a.download = input_xml_filename; // Replace with your desired filename\n\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n\n}","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}